buildscript {
    repositories {
        mavenCentral()
    }
}

def printOutput(def output) {
    return tasks.create("printOutput") {
        for (line in output.toString().readLines()) {
            println "#educational_plugin" + line
        }
    }
}

subprojects {

    apply plugin: 'application'
    apply plugin: 'java'

    sourceCompatibility = 11

    repositories {
        mavenCentral()
    }

    dependencies {
        compile 'com.google.inject:guice:5.0.1'
        compile 'org.springframework:spring-context:5.2.15.RELEASE'
        compile 'org.springframework:spring-core:5.2.15.RELEASE'
        testImplementation 'org.assertj:assertj-core:3.20.2'
        testImplementation  'org.junit.jupiter:junit-jupiter:5.7.2'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
        test.useJUnitPlatform()
    }

    sourceSets {
        main {
            java.srcDir 'src'
        }
        test {
            java.srcDir 'test'
        }
    }

    mainClassName = project.hasProperty("mainClass") ? project.getProperty("mainClass") : ""

    def runOutput = new ByteArrayOutputStream()
    tasks.run.setStandardOutput(runOutput)
    tasks.run.doLast { printOutput(runOutput) }
}
configure(subprojects.findAll {it.name != 'util'}) {
  dependencies {
    compile project(':util').sourceSets.main.output
    testCompile project(':util').sourceSets.test.output
  }
}