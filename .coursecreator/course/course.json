{
  "summary" : "Java course.\nCreated: Jun 14, 2021, 8:48:10 PM.",
  "title" : "Inversion of Control",
  "programming_language" : "JAVA",
  "language" : "en",
  "course_type" : "PyCharm",
  "items" : [
    {
      "title" : "Translator App",
      "task_list" : [
        {
          "name" : "Part 1",
          "files" : {
            "src/com/kovko/runner/Main.java" : {
              "name" : "src/com/kovko/runner/Main.java",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "package com.kovko.runner;\n\nimport com.kovko.translator.Translator;\n\npublic class Main {\n    public static void main(String[] args) {\n        String word = \"car\";\n        Translator translator = new Translator();\n        String translation = translator.translate(word);\n        System.out.println(translation);\n    }\n}\n"
            },
            "src/com/kovko/dictionary/Dictionary.java" : {
              "name" : "src/com/kovko/dictionary/Dictionary.java",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "package com.kovko.dictionary;\n\npublic interface Dictionary {\n    String lookUp(String text);\n}\n"
            },
            "test/com/kovko/translator/TranslatorTest.java" : {
              "name" : "test/com/kovko/translator/TranslatorTest.java",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "package com.kovko.translator;\n\nimport org.junit.jupiter.api.Disabled;\nimport org.junit.jupiter.api.Test;\n\nimport java.lang.reflect.Field;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nclass TranslatorTest {\n\n    @Test\n    void testTranslator() throws NoSuchFieldException, IllegalAccessException {\n        Translator translator = new Translator();\n        Field dictionary = translator.getClass().getDeclaredField(\"dictionary\");\n        dictionary.setAccessible(true);\n        assertThat(dictionary.get(translator))\n                .as(\"Dictionary in the translator should not be null, please initialize it\")\n                .isNotNull();\n    }\n}"
            },
            "src/com/kovko/dictionary/EngRuHashMapDictionary.java" : {
              "name" : "src/com/kovko/dictionary/EngRuHashMapDictionary.java",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "package com.kovko.dictionary;\n\nimport java.util.HashMap;\nimport java.util.Locale;\n\npublic class EngRuHashMapDictionary implements Dictionary {\n\n    private final HashMap<String, String> translations;\n\n    public EngRuHashMapDictionary() {\n        translations = new HashMap<>();\n        translations.put(\"car\", \"автомобиль\");\n        translations.put(\"window\", \"окно\");\n    }\n\n    @Override\n    public String lookUp(String text) {\n        return translations.get(text.toLowerCase(Locale.US).trim());\n    }\n}\n"
            },
            "src/com/kovko/translator/Translator.java" : {
              "name" : "src/com/kovko/translator/Translator.java",
              "placeholders" : [
                {
                  "offset" : 31,
                  "length" : 39,
                  "possible_answer" : "import com.kovko.dictionary.Dictionary;\nimport com.kovko.dictionary.EngRuHashMapDictionary;",
                  "placeholder_text" : "import com.kovko.dictionary.Dictionary;"
                },
                {
                  "offset" : 182,
                  "length" : 4,
                  "possible_answer" : "new EngRuHashMapDictionary()",
                  "placeholder_text" : "null"
                }
              ],
              "is_visible" : true,
              "text" : "package com.kovko.translator;\n\nimport com.kovko.dictionary.Dictionary;\n\npublic class Translator {\n\n    private Dictionary dictionary;\n\n    public Translator() {\n        dictionary = null;\n    }\n\n    public String translate(String word) {\n        return dictionary.lookUp(word);\n    }\n}\n"
            }
          },
          "description_text" : "Structure\nCommunication between classes (UML)\nDependencies withing classes\nChanges\n<br>\n<br>\nWe are working in the company that decided to create a brand new translator app. Some of the code was already written\nby another team. The team had a vision of a future app and tried to use all the best practices.\n<br>\n<br>\nHowever, the application wasn't finished, so at this point it was passed to us, and we have to finish it with some of the requirements.\n<ol>\n    <li>The application should use some dictionary abstraction, as in future we will probably change the implementation</li>\n    <li>We should concentrate on English-Russian translation for now</li>\n    <li>MVP should be able to translate at least two words</li>\n</ol>\n",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Part 2",
          "files" : {
            "src/com/kovko/runner/Main.java" : {
              "name" : "src/com/kovko/runner/Main.java",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "package com.kovko.runner;\n\nimport com.kovko.translator.Translator;\n\npublic class Main {\n    public static void main(String[] args) {\n        String word = \"car\";\n        Translator translator = new Translator();\n        String translation = translator.translate(word);\n        System.out.println(translation);\n    }\n}\n"
            },
            "src/com/kovko/dictionary/Dictionary.java" : {
              "name" : "src/com/kovko/dictionary/Dictionary.java",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "package com.kovko.dictionary;\n\npublic interface Dictionary {\n    String lookUp(String text);\n}\n"
            },
            "src/com/kovko/translator/Translator.java" : {
              "name" : "src/com/kovko/translator/Translator.java",
              "placeholders" : [
                {
                  "offset" : 31,
                  "length" : 0,
                  "dependency" : {
                    "lesson" : "Translator App",
                    "task" : "Part 1",
                    "file" : "src/com/kovko/translator/Translator.java",
                    "placeholder" : 0,
                    "is_visible" : false
                  },
                  "possible_answer" : "import com.kovko.dictionary.Dictionary;\nimport com.kovko.dictionary.EngRuHashMapDictionary;",
                  "placeholder_text" : ""
                },
                {
                  "offset" : 143,
                  "length" : 5,
                  "dependency" : {
                    "lesson" : "Translator App",
                    "task" : "Part 1",
                    "file" : "src/com/kovko/translator/Translator.java",
                    "placeholder" : 1,
                    "is_visible" : false
                  },
                  "possible_answer" : "new EngRuHashMapDictionary()",
                  "placeholder_text" : "null;"
                }
              ],
              "is_visible" : true,
              "text" : "package com.kovko.translator;\n\n\n\npublic class Translator {\n\n    private Dictionary dictionary;\n\n    public Translator() {\n        dictionary = null;;\n    }\n\n    public String translate(String word) {\n        return dictionary.lookUp(word);\n    }\n}\n"
            },
            "test/com/kovko/translator/TranslatorTest.java" : {
              "name" : "test/com/kovko/translator/TranslatorTest.java",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "package com.kovko.translator;\n\nimport org.junit.jupiter.api.Disabled;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.ValueSource;\n\nimport static org.assertj.core.api.AssertionsForInterfaceTypes.assertThat;\n\nclass TranslatorTest {\n\n    @ParameterizedTest\n    @ValueSource(strings = {\"table\", \"money\", \"computer\", \"road\"})\n    void testTranslate(String word) {\n        Translator translator = new Translator();\n        String translation = translator.translate(word);\n        assertThat(translation)\n                .as(\"There is no translation for word \\\"\" + word + \"\\\"\")\n                .isNotNull();\n    }\n}"
            },
            "src/com/kovko/dictionary/EngRuHashMapDictionary.java" : {
              "name" : "src/com/kovko/dictionary/EngRuHashMapDictionary.java",
              "placeholders" : [
                {
                  "offset" : 405,
                  "length" : 11,
                  "possible_answer" : "стол",
                  "placeholder_text" : "translation"
                },
                {
                  "offset" : 446,
                  "length" : 4,
                  "possible_answer" : "money",
                  "placeholder_text" : "word"
                },
                {
                  "offset" : 502,
                  "length" : 11,
                  "possible_answer" : "компьютер",
                  "placeholder_text" : "translation"
                },
                {
                  "offset" : 543,
                  "length" : 4,
                  "possible_answer" : "road",
                  "placeholder_text" : "word"
                }
              ],
              "is_visible" : true,
              "text" : "package com.kovko.dictionary;\n\nimport java.util.HashMap;\nimport java.util.Locale;\n\npublic class EngRuHashMapDictionary implements Dictionary {\n\n    private final HashMap<String, String> translations;\n\n    public EngRuHashMapDictionary() {\n        translations = new HashMap<>();\n        translations.put(\"car\", \"автомобиль\");\n        translations.put(\"window\", \"окно\");\n        translations.put(\"table\", \"translation\");\n        translations.put(\"word\", \"деньги\");\n        translations.put(\"computer\", \"translation\");\n        translations.put(\"word\", \"дорога\");\n    }\n\n    @Override\n    public String lookUp(String text) {\n        return translations.get(text.toLowerCase(Locale.US).trim());\n    }\n}\n"
            }
          },
          "description_text" : "Good news. Out employer absolutely loved the app, however,\nthe research showed that we will be able to improve our sales\nif we triple the number of words in our dictionary.\nThus we have add four more words, and also BI team researched and provided us\nwith the list of words that should be in a new version.\n<hr>\nWe need to add these four words to our dictionary.\n<ol>\n    <li>table</li>\n    <li>money</li>\n    <li>computer</li>\n    <li>road</li>\n</ol>",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Part 3",
          "files" : {
            "src/com/kovko/runner/Main.java" : {
              "name" : "src/com/kovko/runner/Main.java",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "package com.kovko.runner;\n\nimport com.kovko.translator.Translator;\n\npublic class Main {\n    public static void main(String[] args) {\n        String word = \"car\";\n        Translator translator = new Translator();\n        String translation = translator.translate(word);\n        System.out.println(translation);\n    }\n}\n"
            },
            "src/com/kovko/dictionary/Dictionary.java" : {
              "name" : "src/com/kovko/dictionary/Dictionary.java",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "package com.kovko.dictionary;\n\npublic interface Dictionary {\n    String lookUp(String text);\n}\n"
            },
            "src/com/kovko/translator/Translator.java" : {
              "name" : "src/com/kovko/translator/Translator.java",
              "placeholders" : [
                {
                  "offset" : 31,
                  "length" : 0,
                  "dependency" : {
                    "lesson" : "Translator App",
                    "task" : "Part 2",
                    "file" : "src/com/kovko/translator/Translator.java",
                    "placeholder" : 0,
                    "is_visible" : false
                  },
                  "possible_answer" : "import com.kovko.dictionary.Dictionary;\nimport com.kovko.dictionary.EngRuCsvFileDictionary;",
                  "placeholder_text" : ""
                },
                {
                  "offset" : 144,
                  "length" : 5,
                  "dependency" : {
                    "lesson" : "Translator App",
                    "task" : "Part 2",
                    "file" : "src/com/kovko/translator/Translator.java",
                    "placeholder" : 1,
                    "is_visible" : true
                  },
                  "possible_answer" : "new EngRuCsvFileDictionary(\"dictionary.csv\")",
                  "placeholder_text" : "null;"
                }
              ],
              "is_visible" : true,
              "text" : "package com.kovko.translator;\n\n\n\n\npublic class Translator {\n\n    private Dictionary dictionary;\n\n    public Translator() {\n        dictionary = null;;\n    }\n\n    public String translate(String word) {\n        return dictionary.lookUp(word);\n    }\n}\n"
            },
            "test/com/kovko/translator/TranslatorTest.java" : {
              "name" : "test/com/kovko/translator/TranslatorTest.java",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "package com.kovko.translator;\n\nimport com.kovko.dictionary.EngRuCsvFileDictionary;\nimport org.junit.jupiter.api.Disabled;\nimport org.junit.jupiter.api.Test;\n\nimport java.lang.reflect.Field;\nimport java.util.HashMap;\n\nimport static org.assertj.core.api.AssertionsForClassTypes.assertThat;\n\nclass TranslatorTest {\n\n    @Test\n    void testTranslatorCapacity() throws NoSuchFieldException, IllegalAccessException {\n        Translator translator = new Translator();\n        Field declaredField = translator.getClass().getDeclaredField(\"dictionary\");\n        declaredField.setAccessible(true);\n        Object dictionary = declaredField.get(translator);\n        assertThat(dictionary)\n                .as(\"Translator has no dictionary instantiated\")\n                .isNotNull();\n        assertThat(dictionary)\n                .as(\"Translator has a wrong implementation of a dictionary\")\n                .isInstanceOf(EngRuCsvFileDictionary.class);\n        Field translationField = ((EngRuCsvFileDictionary) dictionary).getClass().getDeclaredField(\"translations\");\n        translationField.setAccessible(true);\n        HashMap<String, String> translations = (HashMap<String, String>) translationField.get(dictionary);\n        int size = translations.size();\n        assertThat(size)\n                .as(\"There not enough translations in the dictionary: \" + size +\n                        \"\\nTry to add some new words, \\\"computer\\\", \\\"programmer\\\", \\\"mouse\\\" for example\")\n                .isGreaterThanOrEqualTo(1000);\n    }\n\n}"
            },
            "src/com/kovko/dictionary/EngRuHashMapDictionary.java" : {
              "name" : "src/com/kovko/dictionary/EngRuHashMapDictionary.java",
              "placeholders" : [
                {
                  "offset" : 405,
                  "length" : 11,
                  "dependency" : {
                    "lesson" : "Translator App",
                    "task" : "Part 2",
                    "file" : "src/com/kovko/dictionary/EngRuHashMapDictionary.java",
                    "placeholder" : 0,
                    "is_visible" : false
                  },
                  "possible_answer" : "стол",
                  "placeholder_text" : "translation"
                },
                {
                  "offset" : 446,
                  "length" : 4,
                  "dependency" : {
                    "lesson" : "Translator App",
                    "task" : "Part 2",
                    "file" : "src/com/kovko/dictionary/EngRuHashMapDictionary.java",
                    "placeholder" : 1,
                    "is_visible" : false
                  },
                  "possible_answer" : "money",
                  "placeholder_text" : "word"
                },
                {
                  "offset" : 502,
                  "length" : 11,
                  "dependency" : {
                    "lesson" : "Translator App",
                    "task" : "Part 2",
                    "file" : "src/com/kovko/dictionary/EngRuHashMapDictionary.java",
                    "placeholder" : 2,
                    "is_visible" : false
                  },
                  "possible_answer" : "компьютер",
                  "placeholder_text" : "translation"
                },
                {
                  "offset" : 543,
                  "length" : 4,
                  "dependency" : {
                    "lesson" : "Translator App",
                    "task" : "Part 2",
                    "file" : "src/com/kovko/dictionary/EngRuHashMapDictionary.java",
                    "placeholder" : 3,
                    "is_visible" : false
                  },
                  "possible_answer" : "road",
                  "placeholder_text" : "word"
                }
              ],
              "is_visible" : true,
              "text" : "package com.kovko.dictionary;\n\nimport java.util.HashMap;\nimport java.util.Locale;\n\npublic class EngRuHashMapDictionary implements Dictionary {\n\n    private final HashMap<String, String> translations;\n\n    public EngRuHashMapDictionary() {\n        translations = new HashMap<>();\n        translations.put(\"car\", \"автомобиль\");\n        translations.put(\"window\", \"окно\");\n        translations.put(\"table\", \"translation\");\n        translations.put(\"word\", \"деньги\");\n        translations.put(\"computer\", \"translation\");\n        translations.put(\"word\", \"дорога\");\n    }\n\n    @Override\n    public String lookUp(String text) {\n        return translations.get(text.toLowerCase(Locale.US).trim());\n    }\n}\n"
            },
            "src/com/kovko/dictionary/EngRuCsvFileDictionary.java" : {
              "name" : "src/com/kovko/dictionary/EngRuCsvFileDictionary.java",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "package com.kovko.dictionary;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.nio.charset.Charset;\nimport java.util.HashMap;\nimport java.util.Locale;\n\npublic class EngRuCsvFileDictionary implements Dictionary {\n\n    private static final String DELIMITER = \",\";\n    private final HashMap<String, String> translations;\n\n    public EngRuCsvFileDictionary(String fileName) {\n        Charset charset = Charset.forName(\"UTF-8\");\n        Locale sourceLocale = new Locale(\"us\");\n        Locale targetLocale = new Locale(\"ru\");\n        translations = new HashMap<>();\n\n        try (InputStream stream = getClass().getClassLoader().getResourceAsStream(fileName);\n             InputStreamReader inputStreamReader = new InputStreamReader(stream, charset);\n             BufferedReader reader = new BufferedReader(inputStreamReader)) {\n            for (String line = reader.readLine(); line != null; line = reader.readLine()) {\n                String[] words = line.split(DELIMITER);\n                if (words.length == 2) {\n                    String word = words[0].toLowerCase(sourceLocale).strip();\n                    String translation = words[1].toLowerCase(targetLocale).strip();\n                    translations.put(word, translation);\n                }\n            }\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    @Override\n    public String lookUp(String text) {\n        return translations.get(text.toLowerCase(Locale.US).trim());\n    }\n}\n"
            },
            "src/main/resources/dictionary.csv" : {
              "name" : "src/main/resources/dictionary.csv",
              "placeholders" : [
                {
                  "offset" : 12998,
                  "length" : 38,
                  "possible_answer" : "computer,компьютер\nprogrammer,программист\nmouse,мышь",
                  "placeholder_text" : "/* Put additional translations here */"
                }
              ],
              "is_visible" : true,
              "text" : "as,как\nI,Я\nhis,его\nthat,что\nhe,он\nwas,было\nfor,для\non,на\nare,являются\nwith,с\nthey,они\nbe,быть\nat,в\none,один\nhave,иметь\nthis,это\nfrom,от\nby,по\nword,слово\nbut,но\nwhat,что\nsome,некоторые\nis,является\nit,это\nyou,вы\nor,или\nhad,было\nthe,площадь\nof,из\nto,гора\nand,и\na,основной\nin,взял\nwe,мы\ncan,может\nout,из\nother,другой\nwere,были\nwhich,который\ndo,сделать\ntheir,их\ntime,время\nif,если\nwill,будет\nhow,как\nsaid,указанный\nan,назад\neach,каждый\ntell,сказать\ndoes,делает\nset,набор\nthree,три\nwant,хочу\nair,воздух\nwell,хорошо\nalso,также\nplay,играть\nsmall,небольшой\nend,конец\nput,положить\nhome,домой\nread,читать\nhand,рука\nport,порт\nlarge,большой\nspell,заклинание\nadd,добавлять\neven,даже\nland,земля\nhere,здесь\nmust,должны\nbig,большой\nhigh,высокий\nsuch,такие\nfollow,следовать\nact,акт\nwhy,почему\nask,спросите\nmen,люди\nchange,изменение\nwent,пошел\nlight,свет\nkind,вид\noff,от\nneed,нуждаться\nhouse,дом\npicture,картинка\ntry,пытаться\nus,нам\nagain,снова\nanimal,животных\npoint,точка\nmother,мать\nworld,мир\nnear,около\nbuild,строить\nself,самостоятельно\nearth,земля\nfather,отец\nany,любой\nnew,новый\nwork,работа\npart,часть\ntake,принимать\nget,получать\nplace,место\nmade,сделал\nlive,жить\nwhere,где\nafter,после\nback,назад\nlittle,немного\nonly,только\nround,круглый\nman,человек\nyear,год\ncame,пришел\nshow,шоу\nevery,каждый\ngood,хорошее\nme,меня\ngive,давать\nour,наш\nunder,под\nname,название\nvery,очень\nthrough,через\njust,просто\nform,форма\nsentence,приговор\ngreat,большой\nthink,думать\nsay,сказать\nhelp,помощь\nlow,низкий\nline,линия\ndiffer,отличаются\nturn,поворот\ncause,причиной\nmuch,много\nmean,означать\nbefore,до\nmove,движение\nright,право\nboy,мальчик\nold,старый\ntoo,слишком\nsame,же\nshe,она\nall,все\nthere,там\nwhen,когда\nup,вверх\nuse,использование\nyour,ваш\nway,способ\nabout,о\nmany,многие\nthen,затем\nthem,их\nwrite,запись\nwould,бы\nlike,подобно\nso,так\nthese,эти\nher,ее\nlong,долго\nmake,сделать\nthing,вещь\nsee,посмотреть\nhim,его\ntwo,два\nhas,имеет\nlook,искать\nmore,еще\nday,день\ncould,мог\ngo,идти\ncome,приходят\ndid,сделал\nnumber,число\nsound,звук\nno,нет\nmost,наиболее\npeople,люди\nmy,мой\nover,над\nknow,знать\nwater,вода\nthan,чем\ncall,вызов\nfirst,первый\nwho,кто\nmay,может\ndown,вниз\nside,сторона\nbeen,был\nnow,сейчас\nfind,находить\nhead,руководитель\nstand,стоять\nown,самостоятельно\npage,страница\nshould,должны\ncountry,страна\nfound,найдено\nanswer,ответ\nschool,школа\ngrow,расти\nstudy,исследование\nstill,еще\nlearn,учиться\nplant,завод\ncover,крышка\nfood,еда\nsun,солнце\nfour,четыре\nbetween,между\nstate,состояние\nkeep,держать\neye,глаз\nnever,никогда не\nlast,Последнее\nlet,позволять\nthought,мысль\ncity,город\ntree,дерево\ncross,пересекают\nfarm,ферма\nhard,трудно\nstart,начало\nmight,мощи\nstory,история\nsaw,пила\nfar,далеко\nsea,море\ndraw,привлечь\nleft,слева\nlate,поздно\nrun,запустить\ndon’t,не\nwhile,в то время как\npress,нажмите\nclose,близко\nnight,ночь\nreal,реальный\nlife,жизнь\nfew,несколько\nnorth,к северу\nbook,книга\ncarry,нести\ntook,взял\nscience,наука\neat,есть\nroom,номер\nfriend,друг\nbegan,начал\nidea,идея\nfish,рыба\nmountain,гора\nstop,остановить\nonce,раз\nbase,база\nhear,слышать\nhorse,лошадь\ncut,вырезать\nsure,уверен\nwatch,смотреть\ncolor,цвет\nface,лицо\nwood,дерево\nmain,основной\nopen,открыт\nseem,кажется\ntogether,вместе\nnext,следующий\nwhite,белый\nchildren,дети\nbegin,начать\ngot,получил\nwalk,ходить\nexample,пример\nease,легкость\npaper,бумага\ngroup,группа\nalways,всегда\nmusic,музыка\nthose,\"тех,\"\nboth,как\nmark,знак\noften,часто\nletter,письмо\nuntil,до\nmile,км\nriver,река\ncar,автомобиль\nfeet,футов\ncare,уход\nsecond,Второй\nenough,достаточно\nplain,равнина\ngirl,девушка\nusual,обычно\nyoung,молодой\nready,готовый\nabove,выше\never,когда-либо\nred,красный\nlist,список\nthough,хотя\nfeel,чувствовать\ntalk,разговор\nbird,птица\nsoon,скоро\nbody,тело\ndog,собака\nfamily,семья\ndirect,прямой\npose,представляют\nleave,оставить\nsong,песня\nmeasure,измерять\ndoor,дверь\nproduct,продукт\nblack,черный\nshort,короткая\nnumeral,цифра\nclass,класс\nwind,ветер\nquestion,вопрос\nhappen,произойдет\ncomplete,полная\nship,корабль\narea,площадь\nhalf,половина\nrock,рок\norder,порядок\nfire,огонь\nsouth,юг\nproblem,проблема\npiece,кусок\ntold,сказал\nknew,знал\npass,проходить\nsince,с\ntop,топ\nwhole,весь\nking,король\nstreet,улица\ninch,дюйм\nmultiply,умножить\nnothing,ничего\ncourse,курс\nstay,оставаться\nwheel,колеса\nfull,полный\nforce,сила\nblue,синий\nobject,объект\ndecide,решать\nsurface,поверхность\ndeep,глубоко\nmoon,луна\nisland,остров\nfoot,фут\nsystem,система\nbusy,занято\ntest,тест\nrecord,запись\nboat,лодка\ncommon,общая\ngold,золото\npossible,возможно\nplane,самолет\nstead,вместо него\ndry,сухой\nwonder,Интересно\nlaugh,смех\nthousand,тыс\nago,назад\nran,побежал\ncheck,проверять\ngame,игра\nshape,форма\nequate,приравнять\nhot,горячий\nmiss,мисс\nbrought,принес\nheat,тепло\nsnow,снег\ntire,шина\nbring,приносить\nyes,да\ndistant,удаленная\nfill,заполнить\neast,восток\npaint,краска\nlanguage,язык\namong,среди\nunit,блок\npower,мощность\ntown,город\nfine,отлично\ncertain,уверен\nfly,летать\nfall,падать\nlead,привести\ncry,крик\ndark,темно\nmachine,машина\nnote,примечание\nwait,ждать\nplan,план\nfigure,фигура\nstar,звезда\nbox,коробка\nnoun,существительное\nfield,поле\nrest,остальные\ncorrect,верный\nable,состоянии\npound,фунт\ndone,сделано\nbeauty,красота\ndrive,привод\nstood,стоял\ncontain,содержать\nfront,передние\nteach,учить\nweek,неделя\nfinal,окончательный\ngave,дал\ngreen,зеленый\noh,ой\nquick,быстро\ndevelop,развивать\nocean,океан\nwarm,теплый\nfree,бесплатно\nminute,минут\nstrong,сильный\nspecial,специальный\nmind,ум\nbehind,за\nclear,ясно\ntail,хвост\nproduce,производить\nfact,факт\nspace,пространство\nheard,слышал\nbest,лучше\nhour,час\nbetter,лучше\nTRUE,правда\nduring,во\nhundred,сто\nfive,пять\nremember,запомнить\nstep,шаг\nearly,рано\nhold,удерживайте\nwest,запад\nground,земля\ninterest,интерес\nreach,достичь\nfast,быстро\nverb,глагол\nsing,петь\nlisten,слушать\nsix,шесть\ntable,стол\ntravel,поездки\nless,меньше\nmorning,утро\nten,десять\nsimple,простой\nseveral,несколько\nvowel,гласный\ntoward,к\nwar,война\nlay,заложить\nagainst,против\npattern,шаблон\nslow,медленно\ncenter,центр\nlove,любовь\nperson,человек\nmoney,деньги\nserve,служить\nappear,появляются\nroad,дорога\nmap,карта\nrain,дождь\nrule,правило\ngovern,управлять\npull,тянуть\ncold,холодный\nnotice,уведомление\nvoice,голос\nenergy,энергия\nhunt,охота\nprobable,вероятный\nbed,кровать\nbrother,брат\negg,яйцо\nride,поездка\ncell,клеток\nbelieve,верить\nperhaps,\"возможно,\"\npick,выбрать\nsudden,внезапный\ncount,считать\nsquare,Квадратный\nreason,причина\nlength,длина\nrepresent,представлять\nart,искусство\nsubject,Заголовок\nregion,область\nsize,размер\nvary,меняться\nsettle,урегулировать\nspeak,говорить\nweight,вес\ngeneral,общий\nice,лед\nmatter,дело\ncircle,круг\npair,пара\ninclude,включают\ndivide,разделяй\nsyllable,слог\nfelt,чувствовал\ngrand,великий\nball,мяч\nyet,еще\nwave,волна\ndrop,падение\nheart,сердце\nam,утра\npresent,присутствует\nheavy,тяжелый\ndance,танец\nengine,двигатель\nposition,положение\narm,рука\nwide,широкий\nsail,парус\nmaterial,материал\nfraction,доля\nforest,лес\nsit,сидеть\nrace,гонка\nwindow,окно\nstore,магазин\nsummer,лето\ntrain,поезд\nsleep,сон\nprove,доказывать\nlone,одинокий\nleg,нога\nexercise,упражнение\nwall,стена\ncatch,улов\nmount,крепление\nwish,хотите\nsky,небо\nboard,доска\njoy,радость\nwinter,зима\nsat,Сб\nwritten,написанный\nwild,дикий\ninstrument,инструмент\nkept,хранится\nglass,стекло\ngrass,трава\ncow,корова\njob,работа\nedge,край\nsign,знак\nvisit,визит\npast,мимо\nsoft,мягкая\nfun,весело\nbright,яркий\ngas,газа\nweather,погода\nmonth,месяц\nmillion,миллион\nbear,нести\nfinish,отделка\nhappy,счастливы\nhope,надеюсь\nflower,цветок\nclothe,одевать\nstrange,странный\ngone,ушел\ntrade,торговля\nmelody,мелодия\ntrip,поездка\noffice,офис\nreceive,получать\nrow,строка\nmouth,рот\nexact,точный\nsymbol,символ\ndie,умереть\nleast,мере\ntrouble,беда\nshout,крик\nexcept,кроме\nwrote,писал\nseed,семян\ntone,тон\njoin,присоединиться\nsuggest,предложить\nclean,чистый\nbreak,перерыв\nlady,леди\nyard,двор\nrise,подниматься\nbad,плохо\nblow,удар\noil,масло\nblood,кровь\ntouch,коснуться\ngrew,выросла\ncent,цент\nmix,смешивать\nteam,команда\nwire,провод\ncost,Стоимость\nlost,потерянный\nbrown,коричневый\nwear,носить\ngarden,сад\nequal,равный\nsent,отправлено\nchoose,выбирать\nfell,упал\nfit,соответствовать\nflow,течь\nfair,ярмарка\nbank,банк\ncollect,собирать\nsave,сохранить\ncontrol,контроль\ndecimal,десятичной\near,ухо\nelse,еще\nquite,вполне\nbroke,сломал\ncase,дело\nmiddle,средний\nkill,убивать\nson,сын\nlake,озеро\nmoment,момент\nscale,шкала\nloud,громко\nspring,весна\nobserve,наблюдать\nchild,ребенок\nstraight,прямо\nconsonant,согласный\nnation,нация\ndictionary,словарь\nmilk,молоко\nspeed,скорость\nmethod,метод\norgan,орган\npay,платить\nage,возраст\nsection,раздел\ndress,платье\ncloud,облако\nsurprise,сюрприз\nquiet,тихо\nstone,камень\ntiny,крошечный\nclimb,подъем\ncool,круто\ndesign,дизайн\npoor,бедный\nlot,много\nexperiment,эксперимент\nbottom,снизу\nkey,ключ\niron,железо\nsingle,один\nstick,палка\nflat,плоским\ntwenty,двадцать\nskin,кожа\nsmile,улыбка\ncrease,складка\nhole,отверстие\njump,прыжок\nbaby,ребенок\neight,восемь\nvillage,деревня\nmeet,Знакомства\nroot,корень\nbuy,купить\nraise,поднимать\nsolve,решить\nmetal,металла\nwhether,ли\npush,толчок\nseven,семь\nparagraph,пункт\nthird,третий\nshall,должен\nheld,ручные\nhair,волосы\ndescribe,описывать\ncook,повар\nfloor,этаж\neither,или\nresult,результат\nburn,сжечь\nhill,холм\nsafe,сейф\ncat,кошка\ncentury,век\nconsider,рассматривать\ntype,Тип\nlaw,закон\nbit,немного\ncoast,побережье\ncopy,копия\nphrase,фраза\nsilent,тихий\ntall,высокий\nsand,песок\nsoil,почвы\nroll,рулон\ntemperature,температура\nfinger,палец\nindustry,промышленность\nvalue,значение\nfight,борьба\nlie,ложь\nbeat,бить\nexcite,возбуждать\nnatural,естественный\nview,вид\nsense,смысл\ncapital,капитал\nwon’t,не будет\nchair,стул\ndanger,опасность\nfruit,фрукты\nrich,богатые\nthick,толщиной\nsoldier,солдат\nprocess,процесс\noperate,работать\npractice,практика\nseparate,отдельный\ndifficult,трудный\ndoctor,врач\nplease,пожалуйста\nprotect,защищать\nnoon,полдень\ncrop,урожай\nmodern,современный\nelement,элемент\nhit,хит\nstudent,студент\ncorner,угол\nparty,партия\nsupply,поставка\nwhose,чьи\nlocate,разместить\nring,кольцо\ncharacter,характер\ninsect,насекомое\ncaught,пойманный\nperiod,период\nindicate,указывать\nradio,радио\nspoke,говорил\natom,атом\nhuman,человек\nhistory,история\neffect,эффект\nelectric,электрический\nexpect,ожидать\nbone,кость\nrail,железнодорожные\nimagine,вообразить\nprovide,обеспечить\nagree,соглашаться\nthus,таким образом\ngentle,нежный\nwoman,женщина\ncaptain,капитан\nguess,догадываться\nnecessary,необходимо\nsharp,резкое\nwing,крыло\ncreate,создавать\nneighbor,сосед\nwash,стирка\nbat,летучая мышь\nrather,а\ncrowd,толпа\ncorn,кукуруза\ncompare,сравнить\npoem,стихотворение\nstring,строка\nbell,колокол\ndepend,зависеть\nmeat,мясо\nrub,руб\ntube,трубка\nfamous,известный\ndollar,доллар\nstream,поток\nfear,страх\nsight,зрение\nthin,тонкий\ntriangle,треугольник\nplanet,планета\nhurry,спешить\nchief,главный\ncolony,колония\nclock,часы\nmine,шахта\ntie,связать\nenter,введите\nmajor,основным\nfresh,свежий\nsearch,поиск\nsend,отправить\nyellow,желтый\ngun,пистолет\nallow,позволять\nprint,печать\ndead,мертвый\nspot,место\ndesert,пустыня\nsuit,костюм\ncurrent,ток\nlift,лифт\nrose,выросла\narrive,приходим\nmaster,мастер\ntrack,трек\nparent,родитель\nshore,берег\ndivision,деление\nsheet,лист\nsubstance,вещество\nfavor,пользу\nconnect,подключать\npost,пост\nspend,провести\nchord,аккорд\nfat,жира\nglad,довольный\noriginal,оригинальный\nshare,доля\nstation,станция\ndad,папа\nbread,хлеб\ncharge,взимать\nproper,собственно\nbar,бар\noffer,предложение\nsegment,сегмент\nslave,раб\nduck,утка\ninstant,растворимый\nmarket,рынок\ndegree,степень\npopulate,заселять\nchick,цыпленок\ndear,дорогой\nenemy,враг\nreply,ответ\ndrink,напиток\noccur,происходить\nsupport,поддержка\nspeech,речь\nnature,природа\nrange,диапазон\nsteam,пара\nmotion,движение\npath,путь\nliquid,жидкости\nlog,войти\nmeant,означало\nquotient,фактор\nteeth,зубы\nshell,оболочка\nneck,шея\noxygen,кислорода\nsugar,сахар\ndeath,смерть\npretty,довольно\nskill,умение\nwomen,женщины\nseason,сезон\nsolution,решение\nmagnet,магнит\nsilver,серебро\nthank,спасибо\nbranch,филиал\nmatch,матч\nsuffix,суффикс\nespecially,особенно\nfig,рис\nafraid,боится\nhuge,огромный\nsister,сестра\nsteel,сталь\ndiscuss,обсуждать\nforward,вперед\nsimilar,похожи\nguide,направлять\nexperience,опыт\nscore,счет\napple,яблоко\nbought,купленный\nled,привело\npitch,шаг\ncoat,пальто\nmass,масса\ncard,карта\nband,полоса\nrope,веревка\nslip,скольжение\nwin,выиграть\ndream,мечтать\nevening,вечер\ncondition,состояние\nfeed,корма\ntool,инструмент\ntotal,общий\nbasic,основной\nsmell,запах\nvalley,долина\nnor,ни\ndouble,двойной\nseat,сиденья\ncontinue,продолжать\nblock,блок\nchart,диаграмма\nhat,шляпа\nsell,продать\nsuccess,успех\ncompany,компания\nsubtract,вычитать\nevent,мероприятие\nparticular,частности\ndeal,сделка\nswim,плавать\nterm,термин\nopposite,напротив\nwife,жена\nshoe,обуви\nshoulder,плечо\nspread,распространение\narrange,организовать\ncamp,лагерь\ninvent,изобретать\ncotton,хлопок\nborn,родившийся\ndetermine,определять\nquart,кварта\nnine,девять\ntruck,грузовик\nnoise,шум\nlevel,уровень\nchance,шанс\ngather,собирать\nshop,магазин\nstretch,протяжение\nthrow,бросать\nshine,блеск\nproperty,имущество\ncolumn,колонка\nmolecule,молекула\nselect,выбирать\nwrong,неправильно\ngray,серый\nrepeat,повторение\nrequire,требовать\nbroad,широкий\nprepare,подготовить\nsalt,соль\nnose,нос\nplural,множественное\nanger,гнев\nclaim,претензии\ncontinent,континент\n/* Put additional translations here */"
            }
          },
          "description_text" : "The previous changes in the application helped our company a lot and brought some great revenues.\nThus, the company decided to move further and grow dictionary up to 1000 words.\n<hr>\n<ol>\n    <li> Add more words to the dictionary, so it will contain at least 1000 words</li>\n</ol>\n<hr>\nAt the time we're implementing this feature, we got a comment from our lead developer,\nwho noticed that with this approach it will be quite difficult for us to swap\nor change our implementations, as currently Translator class have more responsibilities than it should.",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Part 4",
          "files" : {
            "src/com/kovko/runner/Main.java" : {
              "name" : "src/com/kovko/runner/Main.java",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "package com.kovko.runner;\n\nimport com.kovko.translator.Translator;\n\npublic class Main {\n    public static void main(String[] args) {\n        String word = \"car\";\n        Translator translator = new Translator();\n        String translation = translator.translate(word);\n        System.out.println(translation);\n    }\n}\n"
            },
            "src/com/kovko/dictionary/Dictionary.java" : {
              "name" : "src/com/kovko/dictionary/Dictionary.java",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "package com.kovko.dictionary;\n\npublic interface Dictionary {\n    String lookUp(String text);\n}\n"
            },
            "src/com/kovko/translator/Translator.java" : {
              "name" : "src/com/kovko/translator/Translator.java",
              "placeholders" : [
                {
                  "offset" : 31,
                  "length" : 0,
                  "dependency" : {
                    "lesson" : "Translator App",
                    "task" : "Part 3",
                    "file" : "src/com/kovko/translator/Translator.java",
                    "placeholder" : 0,
                    "is_visible" : false
                  },
                  "possible_answer" : "import com.kovko.dictionary.Dictionary;\nimport com.kovko.dictionary.EngRuCsvFileDictionary;",
                  "placeholder_text" : ""
                },
                {
                  "offset" : 143,
                  "length" : 5,
                  "dependency" : {
                    "lesson" : "Translator App",
                    "task" : "Part 3",
                    "file" : "src/com/kovko/translator/Translator.java",
                    "placeholder" : 1,
                    "is_visible" : false
                  },
                  "possible_answer" : "new EngRuCsvFileDictionary(\"dictionary.csv\", \"UTF-8\", \"us\", \"ru\")",
                  "placeholder_text" : "null;"
                }
              ],
              "is_visible" : true,
              "text" : "package com.kovko.translator;\n\n\n\npublic class Translator {\n\n    private Dictionary dictionary;\n\n    public Translator() {\n        dictionary = null;;\n    }\n\n    public String translate(String word) {\n        return dictionary.lookUp(word);\n    }\n}\n"
            },
            "src/main/resources/dictionary.csv" : {
              "name" : "src/main/resources/dictionary.csv",
              "placeholders" : [
                {
                  "offset" : 12998,
                  "length" : 31,
                  "dependency" : {
                    "lesson" : "Translator App",
                    "task" : "Part 3",
                    "file" : "src/main/resources/dictionary.csv",
                    "placeholder" : 0,
                    "is_visible" : false
                  },
                  "possible_answer" : "computer,компьютер\nprogrammer,программист\nmouse,мышь",
                  "placeholder_text" : "/* Add additional words here */"
                }
              ],
              "is_visible" : true,
              "text" : "as,как\nI,Я\nhis,его\nthat,что\nhe,он\nwas,было\nfor,для\non,на\nare,являются\nwith,с\nthey,они\nbe,быть\nat,в\none,один\nhave,иметь\nthis,это\nfrom,от\nby,по\nword,слово\nbut,но\nwhat,что\nsome,некоторые\nis,является\nit,это\nyou,вы\nor,или\nhad,было\nthe,площадь\nof,из\nto,гора\nand,и\na,основной\nin,взял\nwe,мы\ncan,может\nout,из\nother,другой\nwere,были\nwhich,который\ndo,сделать\ntheir,их\ntime,время\nif,если\nwill,будет\nhow,как\nsaid,указанный\nan,назад\neach,каждый\ntell,сказать\ndoes,делает\nset,набор\nthree,три\nwant,хочу\nair,воздух\nwell,хорошо\nalso,также\nplay,играть\nsmall,небольшой\nend,конец\nput,положить\nhome,домой\nread,читать\nhand,рука\nport,порт\nlarge,большой\nspell,заклинание\nadd,добавлять\neven,даже\nland,земля\nhere,здесь\nmust,должны\nbig,большой\nhigh,высокий\nsuch,такие\nfollow,следовать\nact,акт\nwhy,почему\nask,спросите\nmen,люди\nchange,изменение\nwent,пошел\nlight,свет\nkind,вид\noff,от\nneed,нуждаться\nhouse,дом\npicture,картинка\ntry,пытаться\nus,нам\nagain,снова\nanimal,животных\npoint,точка\nmother,мать\nworld,мир\nnear,около\nbuild,строить\nself,самостоятельно\nearth,земля\nfather,отец\nany,любой\nnew,новый\nwork,работа\npart,часть\ntake,принимать\nget,получать\nplace,место\nmade,сделал\nlive,жить\nwhere,где\nafter,после\nback,назад\nlittle,немного\nonly,только\nround,круглый\nman,человек\nyear,год\ncame,пришел\nshow,шоу\nevery,каждый\ngood,хорошее\nme,меня\ngive,давать\nour,наш\nunder,под\nname,название\nvery,очень\nthrough,через\njust,просто\nform,форма\nsentence,приговор\ngreat,большой\nthink,думать\nsay,сказать\nhelp,помощь\nlow,низкий\nline,линия\ndiffer,отличаются\nturn,поворот\ncause,причиной\nmuch,много\nmean,означать\nbefore,до\nmove,движение\nright,право\nboy,мальчик\nold,старый\ntoo,слишком\nsame,же\nshe,она\nall,все\nthere,там\nwhen,когда\nup,вверх\nuse,использование\nyour,ваш\nway,способ\nabout,о\nmany,многие\nthen,затем\nthem,их\nwrite,запись\nwould,бы\nlike,подобно\nso,так\nthese,эти\nher,ее\nlong,долго\nmake,сделать\nthing,вещь\nsee,посмотреть\nhim,его\ntwo,два\nhas,имеет\nlook,искать\nmore,еще\nday,день\ncould,мог\ngo,идти\ncome,приходят\ndid,сделал\nnumber,число\nsound,звук\nno,нет\nmost,наиболее\npeople,люди\nmy,мой\nover,над\nknow,знать\nwater,вода\nthan,чем\ncall,вызов\nfirst,первый\nwho,кто\nmay,может\ndown,вниз\nside,сторона\nbeen,был\nnow,сейчас\nfind,находить\nhead,руководитель\nstand,стоять\nown,самостоятельно\npage,страница\nshould,должны\ncountry,страна\nfound,найдено\nanswer,ответ\nschool,школа\ngrow,расти\nstudy,исследование\nstill,еще\nlearn,учиться\nplant,завод\ncover,крышка\nfood,еда\nsun,солнце\nfour,четыре\nbetween,между\nstate,состояние\nkeep,держать\neye,глаз\nnever,никогда не\nlast,Последнее\nlet,позволять\nthought,мысль\ncity,город\ntree,дерево\ncross,пересекают\nfarm,ферма\nhard,трудно\nstart,начало\nmight,мощи\nstory,история\nsaw,пила\nfar,далеко\nsea,море\ndraw,привлечь\nleft,слева\nlate,поздно\nrun,запустить\ndon’t,не\nwhile,в то время как\npress,нажмите\nclose,близко\nnight,ночь\nreal,реальный\nlife,жизнь\nfew,несколько\nnorth,к северу\nbook,книга\ncarry,нести\ntook,взял\nscience,наука\neat,есть\nroom,номер\nfriend,друг\nbegan,начал\nidea,идея\nfish,рыба\nmountain,гора\nstop,остановить\nonce,раз\nbase,база\nhear,слышать\nhorse,лошадь\ncut,вырезать\nsure,уверен\nwatch,смотреть\ncolor,цвет\nface,лицо\nwood,дерево\nmain,основной\nopen,открыт\nseem,кажется\ntogether,вместе\nnext,следующий\nwhite,белый\nchildren,дети\nbegin,начать\ngot,получил\nwalk,ходить\nexample,пример\nease,легкость\npaper,бумага\ngroup,группа\nalways,всегда\nmusic,музыка\nthose,\"тех,\"\nboth,как\nmark,знак\noften,часто\nletter,письмо\nuntil,до\nmile,км\nriver,река\ncar,автомобиль\nfeet,футов\ncare,уход\nsecond,Второй\nenough,достаточно\nplain,равнина\ngirl,девушка\nusual,обычно\nyoung,молодой\nready,готовый\nabove,выше\never,когда-либо\nred,красный\nlist,список\nthough,хотя\nfeel,чувствовать\ntalk,разговор\nbird,птица\nsoon,скоро\nbody,тело\ndog,собака\nfamily,семья\ndirect,прямой\npose,представляют\nleave,оставить\nsong,песня\nmeasure,измерять\ndoor,дверь\nproduct,продукт\nblack,черный\nshort,короткая\nnumeral,цифра\nclass,класс\nwind,ветер\nquestion,вопрос\nhappen,произойдет\ncomplete,полная\nship,корабль\narea,площадь\nhalf,половина\nrock,рок\norder,порядок\nfire,огонь\nsouth,юг\nproblem,проблема\npiece,кусок\ntold,сказал\nknew,знал\npass,проходить\nsince,с\ntop,топ\nwhole,весь\nking,король\nstreet,улица\ninch,дюйм\nmultiply,умножить\nnothing,ничего\ncourse,курс\nstay,оставаться\nwheel,колеса\nfull,полный\nforce,сила\nblue,синий\nobject,объект\ndecide,решать\nsurface,поверхность\ndeep,глубоко\nmoon,луна\nisland,остров\nfoot,фут\nsystem,система\nbusy,занято\ntest,тест\nrecord,запись\nboat,лодка\ncommon,общая\ngold,золото\npossible,возможно\nplane,самолет\nstead,вместо него\ndry,сухой\nwonder,Интересно\nlaugh,смех\nthousand,тыс\nago,назад\nran,побежал\ncheck,проверять\ngame,игра\nshape,форма\nequate,приравнять\nhot,горячий\nmiss,мисс\nbrought,принес\nheat,тепло\nsnow,снег\ntire,шина\nbring,приносить\nyes,да\ndistant,удаленная\nfill,заполнить\neast,восток\npaint,краска\nlanguage,язык\namong,среди\nunit,блок\npower,мощность\ntown,город\nfine,отлично\ncertain,уверен\nfly,летать\nfall,падать\nlead,привести\ncry,крик\ndark,темно\nmachine,машина\nnote,примечание\nwait,ждать\nplan,план\nfigure,фигура\nstar,звезда\nbox,коробка\nnoun,существительное\nfield,поле\nrest,остальные\ncorrect,верный\nable,состоянии\npound,фунт\ndone,сделано\nbeauty,красота\ndrive,привод\nstood,стоял\ncontain,содержать\nfront,передние\nteach,учить\nweek,неделя\nfinal,окончательный\ngave,дал\ngreen,зеленый\noh,ой\nquick,быстро\ndevelop,развивать\nocean,океан\nwarm,теплый\nfree,бесплатно\nminute,минут\nstrong,сильный\nspecial,специальный\nmind,ум\nbehind,за\nclear,ясно\ntail,хвост\nproduce,производить\nfact,факт\nspace,пространство\nheard,слышал\nbest,лучше\nhour,час\nbetter,лучше\nTRUE,правда\nduring,во\nhundred,сто\nfive,пять\nremember,запомнить\nstep,шаг\nearly,рано\nhold,удерживайте\nwest,запад\nground,земля\ninterest,интерес\nreach,достичь\nfast,быстро\nverb,глагол\nsing,петь\nlisten,слушать\nsix,шесть\ntable,стол\ntravel,поездки\nless,меньше\nmorning,утро\nten,десять\nsimple,простой\nseveral,несколько\nvowel,гласный\ntoward,к\nwar,война\nlay,заложить\nagainst,против\npattern,шаблон\nslow,медленно\ncenter,центр\nlove,любовь\nperson,человек\nmoney,деньги\nserve,служить\nappear,появляются\nroad,дорога\nmap,карта\nrain,дождь\nrule,правило\ngovern,управлять\npull,тянуть\ncold,холодный\nnotice,уведомление\nvoice,голос\nenergy,энергия\nhunt,охота\nprobable,вероятный\nbed,кровать\nbrother,брат\negg,яйцо\nride,поездка\ncell,клеток\nbelieve,верить\nperhaps,\"возможно,\"\npick,выбрать\nsudden,внезапный\ncount,считать\nsquare,Квадратный\nreason,причина\nlength,длина\nrepresent,представлять\nart,искусство\nsubject,Заголовок\nregion,область\nsize,размер\nvary,меняться\nsettle,урегулировать\nspeak,говорить\nweight,вес\ngeneral,общий\nice,лед\nmatter,дело\ncircle,круг\npair,пара\ninclude,включают\ndivide,разделяй\nsyllable,слог\nfelt,чувствовал\ngrand,великий\nball,мяч\nyet,еще\nwave,волна\ndrop,падение\nheart,сердце\nam,утра\npresent,присутствует\nheavy,тяжелый\ndance,танец\nengine,двигатель\nposition,положение\narm,рука\nwide,широкий\nsail,парус\nmaterial,материал\nfraction,доля\nforest,лес\nsit,сидеть\nrace,гонка\nwindow,окно\nstore,магазин\nsummer,лето\ntrain,поезд\nsleep,сон\nprove,доказывать\nlone,одинокий\nleg,нога\nexercise,упражнение\nwall,стена\ncatch,улов\nmount,крепление\nwish,хотите\nsky,небо\nboard,доска\njoy,радость\nwinter,зима\nsat,Сб\nwritten,написанный\nwild,дикий\ninstrument,инструмент\nkept,хранится\nglass,стекло\ngrass,трава\ncow,корова\njob,работа\nedge,край\nsign,знак\nvisit,визит\npast,мимо\nsoft,мягкая\nfun,весело\nbright,яркий\ngas,газа\nweather,погода\nmonth,месяц\nmillion,миллион\nbear,нести\nfinish,отделка\nhappy,счастливы\nhope,надеюсь\nflower,цветок\nclothe,одевать\nstrange,странный\ngone,ушел\ntrade,торговля\nmelody,мелодия\ntrip,поездка\noffice,офис\nreceive,получать\nrow,строка\nmouth,рот\nexact,точный\nsymbol,символ\ndie,умереть\nleast,мере\ntrouble,беда\nshout,крик\nexcept,кроме\nwrote,писал\nseed,семян\ntone,тон\njoin,присоединиться\nsuggest,предложить\nclean,чистый\nbreak,перерыв\nlady,леди\nyard,двор\nrise,подниматься\nbad,плохо\nblow,удар\noil,масло\nblood,кровь\ntouch,коснуться\ngrew,выросла\ncent,цент\nmix,смешивать\nteam,команда\nwire,провод\ncost,Стоимость\nlost,потерянный\nbrown,коричневый\nwear,носить\ngarden,сад\nequal,равный\nsent,отправлено\nchoose,выбирать\nfell,упал\nfit,соответствовать\nflow,течь\nfair,ярмарка\nbank,банк\ncollect,собирать\nsave,сохранить\ncontrol,контроль\ndecimal,десятичной\near,ухо\nelse,еще\nquite,вполне\nbroke,сломал\ncase,дело\nmiddle,средний\nkill,убивать\nson,сын\nlake,озеро\nmoment,момент\nscale,шкала\nloud,громко\nspring,весна\nobserve,наблюдать\nchild,ребенок\nstraight,прямо\nconsonant,согласный\nnation,нация\ndictionary,словарь\nmilk,молоко\nspeed,скорость\nmethod,метод\norgan,орган\npay,платить\nage,возраст\nsection,раздел\ndress,платье\ncloud,облако\nsurprise,сюрприз\nquiet,тихо\nstone,камень\ntiny,крошечный\nclimb,подъем\ncool,круто\ndesign,дизайн\npoor,бедный\nlot,много\nexperiment,эксперимент\nbottom,снизу\nkey,ключ\niron,железо\nsingle,один\nstick,палка\nflat,плоским\ntwenty,двадцать\nskin,кожа\nsmile,улыбка\ncrease,складка\nhole,отверстие\njump,прыжок\nbaby,ребенок\neight,восемь\nvillage,деревня\nmeet,Знакомства\nroot,корень\nbuy,купить\nraise,поднимать\nsolve,решить\nmetal,металла\nwhether,ли\npush,толчок\nseven,семь\nparagraph,пункт\nthird,третий\nshall,должен\nheld,ручные\nhair,волосы\ndescribe,описывать\ncook,повар\nfloor,этаж\neither,или\nresult,результат\nburn,сжечь\nhill,холм\nsafe,сейф\ncat,кошка\ncentury,век\nconsider,рассматривать\ntype,Тип\nlaw,закон\nbit,немного\ncoast,побережье\ncopy,копия\nphrase,фраза\nsilent,тихий\ntall,высокий\nsand,песок\nsoil,почвы\nroll,рулон\ntemperature,температура\nfinger,палец\nindustry,промышленность\nvalue,значение\nfight,борьба\nlie,ложь\nbeat,бить\nexcite,возбуждать\nnatural,естественный\nview,вид\nsense,смысл\ncapital,капитал\nwon’t,не будет\nchair,стул\ndanger,опасность\nfruit,фрукты\nrich,богатые\nthick,толщиной\nsoldier,солдат\nprocess,процесс\noperate,работать\npractice,практика\nseparate,отдельный\ndifficult,трудный\ndoctor,врач\nplease,пожалуйста\nprotect,защищать\nnoon,полдень\ncrop,урожай\nmodern,современный\nelement,элемент\nhit,хит\nstudent,студент\ncorner,угол\nparty,партия\nsupply,поставка\nwhose,чьи\nlocate,разместить\nring,кольцо\ncharacter,характер\ninsect,насекомое\ncaught,пойманный\nperiod,период\nindicate,указывать\nradio,радио\nspoke,говорил\natom,атом\nhuman,человек\nhistory,история\neffect,эффект\nelectric,электрический\nexpect,ожидать\nbone,кость\nrail,железнодорожные\nimagine,вообразить\nprovide,обеспечить\nagree,соглашаться\nthus,таким образом\ngentle,нежный\nwoman,женщина\ncaptain,капитан\nguess,догадываться\nnecessary,необходимо\nsharp,резкое\nwing,крыло\ncreate,создавать\nneighbor,сосед\nwash,стирка\nbat,летучая мышь\nrather,а\ncrowd,толпа\ncorn,кукуруза\ncompare,сравнить\npoem,стихотворение\nstring,строка\nbell,колокол\ndepend,зависеть\nmeat,мясо\nrub,руб\ntube,трубка\nfamous,известный\ndollar,доллар\nstream,поток\nfear,страх\nsight,зрение\nthin,тонкий\ntriangle,треугольник\nplanet,планета\nhurry,спешить\nchief,главный\ncolony,колония\nclock,часы\nmine,шахта\ntie,связать\nenter,введите\nmajor,основным\nfresh,свежий\nsearch,поиск\nsend,отправить\nyellow,желтый\ngun,пистолет\nallow,позволять\nprint,печать\ndead,мертвый\nspot,место\ndesert,пустыня\nsuit,костюм\ncurrent,ток\nlift,лифт\nrose,выросла\narrive,приходим\nmaster,мастер\ntrack,трек\nparent,родитель\nshore,берег\ndivision,деление\nsheet,лист\nsubstance,вещество\nfavor,пользу\nconnect,подключать\npost,пост\nspend,провести\nchord,аккорд\nfat,жира\nglad,довольный\noriginal,оригинальный\nshare,доля\nstation,станция\ndad,папа\nbread,хлеб\ncharge,взимать\nproper,собственно\nbar,бар\noffer,предложение\nsegment,сегмент\nslave,раб\nduck,утка\ninstant,растворимый\nmarket,рынок\ndegree,степень\npopulate,заселять\nchick,цыпленок\ndear,дорогой\nenemy,враг\nreply,ответ\ndrink,напиток\noccur,происходить\nsupport,поддержка\nspeech,речь\nnature,природа\nrange,диапазон\nsteam,пара\nmotion,движение\npath,путь\nliquid,жидкости\nlog,войти\nmeant,означало\nquotient,фактор\nteeth,зубы\nshell,оболочка\nneck,шея\noxygen,кислорода\nsugar,сахар\ndeath,смерть\npretty,довольно\nskill,умение\nwomen,женщины\nseason,сезон\nsolution,решение\nmagnet,магнит\nsilver,серебро\nthank,спасибо\nbranch,филиал\nmatch,матч\nsuffix,суффикс\nespecially,особенно\nfig,рис\nafraid,боится\nhuge,огромный\nsister,сестра\nsteel,сталь\ndiscuss,обсуждать\nforward,вперед\nsimilar,похожи\nguide,направлять\nexperience,опыт\nscore,счет\napple,яблоко\nbought,купленный\nled,привело\npitch,шаг\ncoat,пальто\nmass,масса\ncard,карта\nband,полоса\nrope,веревка\nslip,скольжение\nwin,выиграть\ndream,мечтать\nevening,вечер\ncondition,состояние\nfeed,корма\ntool,инструмент\ntotal,общий\nbasic,основной\nsmell,запах\nvalley,долина\nnor,ни\ndouble,двойной\nseat,сиденья\ncontinue,продолжать\nblock,блок\nchart,диаграмма\nhat,шляпа\nsell,продать\nsuccess,успех\ncompany,компания\nsubtract,вычитать\nevent,мероприятие\nparticular,частности\ndeal,сделка\nswim,плавать\nterm,термин\nopposite,напротив\nwife,жена\nshoe,обуви\nshoulder,плечо\nspread,распространение\narrange,организовать\ncamp,лагерь\ninvent,изобретать\ncotton,хлопок\nborn,родившийся\ndetermine,определять\nquart,кварта\nnine,девять\ntruck,грузовик\nnoise,шум\nlevel,уровень\nchance,шанс\ngather,собирать\nshop,магазин\nstretch,протяжение\nthrow,бросать\nshine,блеск\nproperty,имущество\ncolumn,колонка\nmolecule,молекула\nselect,выбирать\nwrong,неправильно\ngray,серый\nrepeat,повторение\nrequire,требовать\nbroad,широкий\nprepare,подготовить\nsalt,соль\nnose,нос\nplural,множественное\nanger,гнев\nclaim,претензии\ncontinent,континент\n/* Add additional words here */"
            },
            "src/com/kovko/dictionary/EngRuHashMapDictionary.java" : {
              "name" : "src/com/kovko/dictionary/EngRuHashMapDictionary.java",
              "placeholders" : [
                {
                  "offset" : 405,
                  "length" : 11,
                  "dependency" : {
                    "lesson" : "Translator App",
                    "task" : "Part 3",
                    "file" : "src/com/kovko/dictionary/EngRuHashMapDictionary.java",
                    "placeholder" : 0,
                    "is_visible" : false
                  },
                  "possible_answer" : "стол",
                  "placeholder_text" : "translation"
                },
                {
                  "offset" : 446,
                  "length" : 4,
                  "dependency" : {
                    "lesson" : "Translator App",
                    "task" : "Part 3",
                    "file" : "src/com/kovko/dictionary/EngRuHashMapDictionary.java",
                    "placeholder" : 1,
                    "is_visible" : false
                  },
                  "possible_answer" : "money",
                  "placeholder_text" : "word"
                },
                {
                  "offset" : 502,
                  "length" : 11,
                  "dependency" : {
                    "lesson" : "Translator App",
                    "task" : "Part 3",
                    "file" : "src/com/kovko/dictionary/EngRuHashMapDictionary.java",
                    "placeholder" : 2,
                    "is_visible" : false
                  },
                  "possible_answer" : "компьютер",
                  "placeholder_text" : "translation"
                },
                {
                  "offset" : 543,
                  "length" : 4,
                  "dependency" : {
                    "lesson" : "Translator App",
                    "task" : "Part 3",
                    "file" : "src/com/kovko/dictionary/EngRuHashMapDictionary.java",
                    "placeholder" : 3,
                    "is_visible" : false
                  },
                  "possible_answer" : "road",
                  "placeholder_text" : "word"
                }
              ],
              "is_visible" : true,
              "text" : "package com.kovko.dictionary;\n\nimport java.util.HashMap;\nimport java.util.Locale;\n\npublic class EngRuHashMapDictionary implements Dictionary {\n\n    private final HashMap<String, String> translations;\n\n    public EngRuHashMapDictionary() {\n        translations = new HashMap<>();\n        translations.put(\"car\", \"автомобиль\");\n        translations.put(\"window\", \"окно\");\n        translations.put(\"table\", \"translation\");\n        translations.put(\"word\", \"деньги\");\n        translations.put(\"computer\", \"translation\");\n        translations.put(\"word\", \"дорога\");\n    }\n\n    @Override\n    public String lookUp(String text) {\n        return translations.get(text.toLowerCase(Locale.US).trim());\n    }\n}\n"
            },
            "test/com/kovko/dictionary/EngRuCsvFileDictionaryTest.java" : {
              "name" : "test/com/kovko/dictionary/EngRuCsvFileDictionaryTest.java",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "package com.kovko.dictionary;\n\nimport com.kovko.translator.Translator;\nimport org.junit.jupiter.api.Test;\n\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.Field;\nimport java.util.HashMap;\n\n\nimport static org.assertj.core.api.AssertionsForInterfaceTypes.assertThat;\n\nclass EngRuCsvFileDictionaryTest {\n\n    @Test\n    void testConstructor() {\n        for (Constructor<?> declaredConstructor : EngRuCsvFileDictionary.class.getDeclaredConstructors()) {\n            int parameterCount = declaredConstructor.getParameterCount();\n            assertThat(parameterCount)\n                    .as(\"There should be four parameters in the EngRuCsvFileDictionary.\\n\" +\n                            \"One for file name, one for charset file is using,\\n\" +\n                            \"and the last two for the locales of source and target languages\")\n                    .isEqualTo(4);\n        }\n    }\n\n    @Test\n    void testTranslatorCapacity() throws NoSuchFieldException, IllegalAccessException {\n        Translator translator = new Translator();\n        Field declaredField = translator.getClass().getDeclaredField(\"dictionary\");\n        declaredField.setAccessible(true);\n        Object dictionary = declaredField.get(translator);\n        assertThat(dictionary)\n                .as(\"Translator has no dictionary instantiated\")\n                .isNotNull();\n        assertThat(dictionary)\n                .as(\"Translator has a wrong implementation of a dictionary\")\n                .isInstanceOf(EngRuCsvFileDictionary.class);\n        Field translationField = ((EngRuCsvFileDictionary) dictionary).getClass().getDeclaredField(\"translations\");\n        translationField.setAccessible(true);\n        HashMap translations = (HashMap) translationField.get(dictionary);\n        int size = translations.size();\n        assertThat(size)\n                .as(\"There not enough translations in the dictionary: \" + size +\n                        \"\\nTry to add some new words, \\\"computer\\\", \\\"programmer\\\", \\\"mouse\\\" for example\")\n                .isGreaterThanOrEqualTo(1000);\n    }\n}"
            },
            "src/com/kovko/dictionary/EngRuCsvFileDictionary.java" : {
              "name" : "src/com/kovko/dictionary/EngRuCsvFileDictionary.java",
              "placeholders" : [
                {
                  "offset" : 438,
                  "length" : 15,
                  "possible_answer" : "String fileName, String charsetName, String sourceLanguage, String targetLanguage",
                  "placeholder_text" : "String fileName"
                },
                {
                  "offset" : 499,
                  "length" : 7,
                  "possible_answer" : "charsetName",
                  "placeholder_text" : "\"UTF-8\""
                },
                {
                  "offset" : 550,
                  "length" : 4,
                  "possible_answer" : "sourceLanguage",
                  "placeholder_text" : "\"us\""
                },
                {
                  "offset" : 598,
                  "length" : 4,
                  "possible_answer" : "targetLanguage",
                  "placeholder_text" : "\"ru\""
                }
              ],
              "is_visible" : true,
              "text" : "package com.kovko.dictionary;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.nio.charset.Charset;\nimport java.util.HashMap;\nimport java.util.Locale;\n\npublic class EngRuCsvFileDictionary implements Dictionary {\n\n    private static final String DELIMITER = \",\";\n    private final HashMap<String, String> translations;\n\n    public EngRuCsvFileDictionary(String fileName) {\n        Charset charset = Charset.forName(\"UTF-8\");\n        Locale sourceLocale = new Locale(\"us\");\n        Locale targetLocale = new Locale(\"ru\");\n        translations = new HashMap<>();\n\n        try (InputStream stream = getClass().getClassLoader().getResourceAsStream(fileName);\n             InputStreamReader inputStreamReader = new InputStreamReader(stream, charset);\n             BufferedReader reader = new BufferedReader(inputStreamReader)) {\n            for (String line = reader.readLine(); line != null; line = reader.readLine()) {\n                String[] words = line.split(DELIMITER);\n                if (words.length == 2) {\n                    String word = words[0].toLowerCase(sourceLocale).strip();\n                    String translation = words[1].toLowerCase(targetLocale).strip();\n                    translations.put(word, translation);\n                }\n            }\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    @Override\n    public String lookUp(String text) {\n        return translations.get(text.toLowerCase(Locale.US).trim());\n    }\n}\n"
            }
          },
          "description_text" : "The users really liked this new feature which allowed them to use a file with translations.\nOur company praised our work and decided to expand and provide dictionaries for different languages.\nSo we are going international!\n<hr>\n<ol>\n    <li>Ensure that the system can support different language pairs</li>\n    <li>The file can use some weird encoding, but we should make sure that translator will work with it</li>\n</ol>",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Part 5",
          "files" : {
            "src/com/kovko/runner/Main.java" : {
              "name" : "src/com/kovko/runner/Main.java",
              "placeholders" : [
                {
                  "offset" : 141,
                  "length" : 65,
                  "possible_answer" : "String fileName = args[0];\n        String charsetName = args[1];\n        String sourceLanguage = args[2];\n        String targetLanguage = args[3];",
                  "placeholder_text" : "/* Read application arguments in order to configure translator */"
                },
                {
                  "offset" : 283,
                  "length" : 0,
                  "possible_answer" : "fileName, charsetName, sourceLanguage, targetLanguage",
                  "placeholder_text" : ""
                }
              ],
              "is_visible" : true,
              "text" : "package com.kovko.runner;\n\nimport com.kovko.translator.Translator;\n\npublic class Main {\n    public static void main(String[] args) {\n        /* Read application arguments in order to configure translator */\n        String word = \"car\";\n        Translator translator = new Translator();\n        String translation = translator.translate(word);\n        System.out.println(translation);\n    }\n}\n"
            },
            "src/com/kovko/dictionary/Dictionary.java" : {
              "name" : "src/com/kovko/dictionary/Dictionary.java",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "package com.kovko.dictionary;\n\npublic interface Dictionary {\n    String lookUp(String text);\n}\n"
            },
            "src/com/kovko/translator/Translator.java" : {
              "name" : "src/com/kovko/translator/Translator.java",
              "placeholders" : [
                {
                  "offset" : 31,
                  "length" : 0,
                  "dependency" : {
                    "lesson" : "Translator App",
                    "task" : "Part 4",
                    "file" : "src/com/kovko/translator/Translator.java",
                    "placeholder" : 0,
                    "is_visible" : false
                  },
                  "possible_answer" : "import com.kovko.dictionary.Dictionary;\nimport com.kovko.dictionary.EngRuCsvFileDictionary;",
                  "placeholder_text" : ""
                },
                {
                  "offset" : 118,
                  "length" : 0,
                  "possible_answer" : "String fileName, String charsetName, String sourceLanguage, String targetLanguage",
                  "placeholder_text" : ""
                },
                {
                  "offset" : 143,
                  "length" : 5,
                  "dependency" : {
                    "lesson" : "Translator App",
                    "task" : "Part 4",
                    "file" : "src/com/kovko/translator/Translator.java",
                    "placeholder" : 1,
                    "is_visible" : false
                  },
                  "possible_answer" : "new EngRuCsvFileDictionary(fileName, charsetName, sourceLanguage, targetLanguage)",
                  "placeholder_text" : "null;"
                }
              ],
              "is_visible" : true,
              "text" : "package com.kovko.translator;\n\n\n\npublic class Translator {\n\n    private Dictionary dictionary;\n\n    public Translator() {\n        dictionary = null;;\n    }\n\n    public String translate(String word) {\n        return dictionary.lookUp(word);\n    }\n}\n"
            },
            "src/main/resources/dictionary.csv" : {
              "name" : "src/main/resources/dictionary.csv",
              "placeholders" : [
                {
                  "offset" : 12998,
                  "length" : 31,
                  "dependency" : {
                    "lesson" : "Translator App",
                    "task" : "Part 4",
                    "file" : "src/main/resources/dictionary.csv",
                    "placeholder" : 0,
                    "is_visible" : false
                  },
                  "possible_answer" : "computer,компьютер\nprogrammer,программист\nmouse,мышь",
                  "placeholder_text" : "/* Add additional words here */"
                }
              ],
              "is_visible" : true,
              "text" : "as,как\nI,Я\nhis,его\nthat,что\nhe,он\nwas,было\nfor,для\non,на\nare,являются\nwith,с\nthey,они\nbe,быть\nat,в\none,один\nhave,иметь\nthis,это\nfrom,от\nby,по\nword,слово\nbut,но\nwhat,что\nsome,некоторые\nis,является\nit,это\nyou,вы\nor,или\nhad,было\nthe,площадь\nof,из\nto,гора\nand,и\na,основной\nin,взял\nwe,мы\ncan,может\nout,из\nother,другой\nwere,были\nwhich,который\ndo,сделать\ntheir,их\ntime,время\nif,если\nwill,будет\nhow,как\nsaid,указанный\nan,назад\neach,каждый\ntell,сказать\ndoes,делает\nset,набор\nthree,три\nwant,хочу\nair,воздух\nwell,хорошо\nalso,также\nplay,играть\nsmall,небольшой\nend,конец\nput,положить\nhome,домой\nread,читать\nhand,рука\nport,порт\nlarge,большой\nspell,заклинание\nadd,добавлять\neven,даже\nland,земля\nhere,здесь\nmust,должны\nbig,большой\nhigh,высокий\nsuch,такие\nfollow,следовать\nact,акт\nwhy,почему\nask,спросите\nmen,люди\nchange,изменение\nwent,пошел\nlight,свет\nkind,вид\noff,от\nneed,нуждаться\nhouse,дом\npicture,картинка\ntry,пытаться\nus,нам\nagain,снова\nanimal,животных\npoint,точка\nmother,мать\nworld,мир\nnear,около\nbuild,строить\nself,самостоятельно\nearth,земля\nfather,отец\nany,любой\nnew,новый\nwork,работа\npart,часть\ntake,принимать\nget,получать\nplace,место\nmade,сделал\nlive,жить\nwhere,где\nafter,после\nback,назад\nlittle,немного\nonly,только\nround,круглый\nman,человек\nyear,год\ncame,пришел\nshow,шоу\nevery,каждый\ngood,хорошее\nme,меня\ngive,давать\nour,наш\nunder,под\nname,название\nvery,очень\nthrough,через\njust,просто\nform,форма\nsentence,приговор\ngreat,большой\nthink,думать\nsay,сказать\nhelp,помощь\nlow,низкий\nline,линия\ndiffer,отличаются\nturn,поворот\ncause,причиной\nmuch,много\nmean,означать\nbefore,до\nmove,движение\nright,право\nboy,мальчик\nold,старый\ntoo,слишком\nsame,же\nshe,она\nall,все\nthere,там\nwhen,когда\nup,вверх\nuse,использование\nyour,ваш\nway,способ\nabout,о\nmany,многие\nthen,затем\nthem,их\nwrite,запись\nwould,бы\nlike,подобно\nso,так\nthese,эти\nher,ее\nlong,долго\nmake,сделать\nthing,вещь\nsee,посмотреть\nhim,его\ntwo,два\nhas,имеет\nlook,искать\nmore,еще\nday,день\ncould,мог\ngo,идти\ncome,приходят\ndid,сделал\nnumber,число\nsound,звук\nno,нет\nmost,наиболее\npeople,люди\nmy,мой\nover,над\nknow,знать\nwater,вода\nthan,чем\ncall,вызов\nfirst,первый\nwho,кто\nmay,может\ndown,вниз\nside,сторона\nbeen,был\nnow,сейчас\nfind,находить\nhead,руководитель\nstand,стоять\nown,самостоятельно\npage,страница\nshould,должны\ncountry,страна\nfound,найдено\nanswer,ответ\nschool,школа\ngrow,расти\nstudy,исследование\nstill,еще\nlearn,учиться\nplant,завод\ncover,крышка\nfood,еда\nsun,солнце\nfour,четыре\nbetween,между\nstate,состояние\nkeep,держать\neye,глаз\nnever,никогда не\nlast,Последнее\nlet,позволять\nthought,мысль\ncity,город\ntree,дерево\ncross,пересекают\nfarm,ферма\nhard,трудно\nstart,начало\nmight,мощи\nstory,история\nsaw,пила\nfar,далеко\nsea,море\ndraw,привлечь\nleft,слева\nlate,поздно\nrun,запустить\ndon’t,не\nwhile,в то время как\npress,нажмите\nclose,близко\nnight,ночь\nreal,реальный\nlife,жизнь\nfew,несколько\nnorth,к северу\nbook,книга\ncarry,нести\ntook,взял\nscience,наука\neat,есть\nroom,номер\nfriend,друг\nbegan,начал\nidea,идея\nfish,рыба\nmountain,гора\nstop,остановить\nonce,раз\nbase,база\nhear,слышать\nhorse,лошадь\ncut,вырезать\nsure,уверен\nwatch,смотреть\ncolor,цвет\nface,лицо\nwood,дерево\nmain,основной\nopen,открыт\nseem,кажется\ntogether,вместе\nnext,следующий\nwhite,белый\nchildren,дети\nbegin,начать\ngot,получил\nwalk,ходить\nexample,пример\nease,легкость\npaper,бумага\ngroup,группа\nalways,всегда\nmusic,музыка\nthose,\"тех,\"\nboth,как\nmark,знак\noften,часто\nletter,письмо\nuntil,до\nmile,км\nriver,река\ncar,автомобиль\nfeet,футов\ncare,уход\nsecond,Второй\nenough,достаточно\nplain,равнина\ngirl,девушка\nusual,обычно\nyoung,молодой\nready,готовый\nabove,выше\never,когда-либо\nred,красный\nlist,список\nthough,хотя\nfeel,чувствовать\ntalk,разговор\nbird,птица\nsoon,скоро\nbody,тело\ndog,собака\nfamily,семья\ndirect,прямой\npose,представляют\nleave,оставить\nsong,песня\nmeasure,измерять\ndoor,дверь\nproduct,продукт\nblack,черный\nshort,короткая\nnumeral,цифра\nclass,класс\nwind,ветер\nquestion,вопрос\nhappen,произойдет\ncomplete,полная\nship,корабль\narea,площадь\nhalf,половина\nrock,рок\norder,порядок\nfire,огонь\nsouth,юг\nproblem,проблема\npiece,кусок\ntold,сказал\nknew,знал\npass,проходить\nsince,с\ntop,топ\nwhole,весь\nking,король\nstreet,улица\ninch,дюйм\nmultiply,умножить\nnothing,ничего\ncourse,курс\nstay,оставаться\nwheel,колеса\nfull,полный\nforce,сила\nblue,синий\nobject,объект\ndecide,решать\nsurface,поверхность\ndeep,глубоко\nmoon,луна\nisland,остров\nfoot,фут\nsystem,система\nbusy,занято\ntest,тест\nrecord,запись\nboat,лодка\ncommon,общая\ngold,золото\npossible,возможно\nplane,самолет\nstead,вместо него\ndry,сухой\nwonder,Интересно\nlaugh,смех\nthousand,тыс\nago,назад\nran,побежал\ncheck,проверять\ngame,игра\nshape,форма\nequate,приравнять\nhot,горячий\nmiss,мисс\nbrought,принес\nheat,тепло\nsnow,снег\ntire,шина\nbring,приносить\nyes,да\ndistant,удаленная\nfill,заполнить\neast,восток\npaint,краска\nlanguage,язык\namong,среди\nunit,блок\npower,мощность\ntown,город\nfine,отлично\ncertain,уверен\nfly,летать\nfall,падать\nlead,привести\ncry,крик\ndark,темно\nmachine,машина\nnote,примечание\nwait,ждать\nplan,план\nfigure,фигура\nstar,звезда\nbox,коробка\nnoun,существительное\nfield,поле\nrest,остальные\ncorrect,верный\nable,состоянии\npound,фунт\ndone,сделано\nbeauty,красота\ndrive,привод\nstood,стоял\ncontain,содержать\nfront,передние\nteach,учить\nweek,неделя\nfinal,окончательный\ngave,дал\ngreen,зеленый\noh,ой\nquick,быстро\ndevelop,развивать\nocean,океан\nwarm,теплый\nfree,бесплатно\nminute,минут\nstrong,сильный\nspecial,специальный\nmind,ум\nbehind,за\nclear,ясно\ntail,хвост\nproduce,производить\nfact,факт\nspace,пространство\nheard,слышал\nbest,лучше\nhour,час\nbetter,лучше\nTRUE,правда\nduring,во\nhundred,сто\nfive,пять\nremember,запомнить\nstep,шаг\nearly,рано\nhold,удерживайте\nwest,запад\nground,земля\ninterest,интерес\nreach,достичь\nfast,быстро\nverb,глагол\nsing,петь\nlisten,слушать\nsix,шесть\ntable,стол\ntravel,поездки\nless,меньше\nmorning,утро\nten,десять\nsimple,простой\nseveral,несколько\nvowel,гласный\ntoward,к\nwar,война\nlay,заложить\nagainst,против\npattern,шаблон\nslow,медленно\ncenter,центр\nlove,любовь\nperson,человек\nmoney,деньги\nserve,служить\nappear,появляются\nroad,дорога\nmap,карта\nrain,дождь\nrule,правило\ngovern,управлять\npull,тянуть\ncold,холодный\nnotice,уведомление\nvoice,голос\nenergy,энергия\nhunt,охота\nprobable,вероятный\nbed,кровать\nbrother,брат\negg,яйцо\nride,поездка\ncell,клеток\nbelieve,верить\nperhaps,\"возможно,\"\npick,выбрать\nsudden,внезапный\ncount,считать\nsquare,Квадратный\nreason,причина\nlength,длина\nrepresent,представлять\nart,искусство\nsubject,Заголовок\nregion,область\nsize,размер\nvary,меняться\nsettle,урегулировать\nspeak,говорить\nweight,вес\ngeneral,общий\nice,лед\nmatter,дело\ncircle,круг\npair,пара\ninclude,включают\ndivide,разделяй\nsyllable,слог\nfelt,чувствовал\ngrand,великий\nball,мяч\nyet,еще\nwave,волна\ndrop,падение\nheart,сердце\nam,утра\npresent,присутствует\nheavy,тяжелый\ndance,танец\nengine,двигатель\nposition,положение\narm,рука\nwide,широкий\nsail,парус\nmaterial,материал\nfraction,доля\nforest,лес\nsit,сидеть\nrace,гонка\nwindow,окно\nstore,магазин\nsummer,лето\ntrain,поезд\nsleep,сон\nprove,доказывать\nlone,одинокий\nleg,нога\nexercise,упражнение\nwall,стена\ncatch,улов\nmount,крепление\nwish,хотите\nsky,небо\nboard,доска\njoy,радость\nwinter,зима\nsat,Сб\nwritten,написанный\nwild,дикий\ninstrument,инструмент\nkept,хранится\nglass,стекло\ngrass,трава\ncow,корова\njob,работа\nedge,край\nsign,знак\nvisit,визит\npast,мимо\nsoft,мягкая\nfun,весело\nbright,яркий\ngas,газа\nweather,погода\nmonth,месяц\nmillion,миллион\nbear,нести\nfinish,отделка\nhappy,счастливы\nhope,надеюсь\nflower,цветок\nclothe,одевать\nstrange,странный\ngone,ушел\ntrade,торговля\nmelody,мелодия\ntrip,поездка\noffice,офис\nreceive,получать\nrow,строка\nmouth,рот\nexact,точный\nsymbol,символ\ndie,умереть\nleast,мере\ntrouble,беда\nshout,крик\nexcept,кроме\nwrote,писал\nseed,семян\ntone,тон\njoin,присоединиться\nsuggest,предложить\nclean,чистый\nbreak,перерыв\nlady,леди\nyard,двор\nrise,подниматься\nbad,плохо\nblow,удар\noil,масло\nblood,кровь\ntouch,коснуться\ngrew,выросла\ncent,цент\nmix,смешивать\nteam,команда\nwire,провод\ncost,Стоимость\nlost,потерянный\nbrown,коричневый\nwear,носить\ngarden,сад\nequal,равный\nsent,отправлено\nchoose,выбирать\nfell,упал\nfit,соответствовать\nflow,течь\nfair,ярмарка\nbank,банк\ncollect,собирать\nsave,сохранить\ncontrol,контроль\ndecimal,десятичной\near,ухо\nelse,еще\nquite,вполне\nbroke,сломал\ncase,дело\nmiddle,средний\nkill,убивать\nson,сын\nlake,озеро\nmoment,момент\nscale,шкала\nloud,громко\nspring,весна\nobserve,наблюдать\nchild,ребенок\nstraight,прямо\nconsonant,согласный\nnation,нация\ndictionary,словарь\nmilk,молоко\nspeed,скорость\nmethod,метод\norgan,орган\npay,платить\nage,возраст\nsection,раздел\ndress,платье\ncloud,облако\nsurprise,сюрприз\nquiet,тихо\nstone,камень\ntiny,крошечный\nclimb,подъем\ncool,круто\ndesign,дизайн\npoor,бедный\nlot,много\nexperiment,эксперимент\nbottom,снизу\nkey,ключ\niron,железо\nsingle,один\nstick,палка\nflat,плоским\ntwenty,двадцать\nskin,кожа\nsmile,улыбка\ncrease,складка\nhole,отверстие\njump,прыжок\nbaby,ребенок\neight,восемь\nvillage,деревня\nmeet,Знакомства\nroot,корень\nbuy,купить\nraise,поднимать\nsolve,решить\nmetal,металла\nwhether,ли\npush,толчок\nseven,семь\nparagraph,пункт\nthird,третий\nshall,должен\nheld,ручные\nhair,волосы\ndescribe,описывать\ncook,повар\nfloor,этаж\neither,или\nresult,результат\nburn,сжечь\nhill,холм\nsafe,сейф\ncat,кошка\ncentury,век\nconsider,рассматривать\ntype,Тип\nlaw,закон\nbit,немного\ncoast,побережье\ncopy,копия\nphrase,фраза\nsilent,тихий\ntall,высокий\nsand,песок\nsoil,почвы\nroll,рулон\ntemperature,температура\nfinger,палец\nindustry,промышленность\nvalue,значение\nfight,борьба\nlie,ложь\nbeat,бить\nexcite,возбуждать\nnatural,естественный\nview,вид\nsense,смысл\ncapital,капитал\nwon’t,не будет\nchair,стул\ndanger,опасность\nfruit,фрукты\nrich,богатые\nthick,толщиной\nsoldier,солдат\nprocess,процесс\noperate,работать\npractice,практика\nseparate,отдельный\ndifficult,трудный\ndoctor,врач\nplease,пожалуйста\nprotect,защищать\nnoon,полдень\ncrop,урожай\nmodern,современный\nelement,элемент\nhit,хит\nstudent,студент\ncorner,угол\nparty,партия\nsupply,поставка\nwhose,чьи\nlocate,разместить\nring,кольцо\ncharacter,характер\ninsect,насекомое\ncaught,пойманный\nperiod,период\nindicate,указывать\nradio,радио\nspoke,говорил\natom,атом\nhuman,человек\nhistory,история\neffect,эффект\nelectric,электрический\nexpect,ожидать\nbone,кость\nrail,железнодорожные\nimagine,вообразить\nprovide,обеспечить\nagree,соглашаться\nthus,таким образом\ngentle,нежный\nwoman,женщина\ncaptain,капитан\nguess,догадываться\nnecessary,необходимо\nsharp,резкое\nwing,крыло\ncreate,создавать\nneighbor,сосед\nwash,стирка\nbat,летучая мышь\nrather,а\ncrowd,толпа\ncorn,кукуруза\ncompare,сравнить\npoem,стихотворение\nstring,строка\nbell,колокол\ndepend,зависеть\nmeat,мясо\nrub,руб\ntube,трубка\nfamous,известный\ndollar,доллар\nstream,поток\nfear,страх\nsight,зрение\nthin,тонкий\ntriangle,треугольник\nplanet,планета\nhurry,спешить\nchief,главный\ncolony,колония\nclock,часы\nmine,шахта\ntie,связать\nenter,введите\nmajor,основным\nfresh,свежий\nsearch,поиск\nsend,отправить\nyellow,желтый\ngun,пистолет\nallow,позволять\nprint,печать\ndead,мертвый\nspot,место\ndesert,пустыня\nsuit,костюм\ncurrent,ток\nlift,лифт\nrose,выросла\narrive,приходим\nmaster,мастер\ntrack,трек\nparent,родитель\nshore,берег\ndivision,деление\nsheet,лист\nsubstance,вещество\nfavor,пользу\nconnect,подключать\npost,пост\nspend,провести\nchord,аккорд\nfat,жира\nglad,довольный\noriginal,оригинальный\nshare,доля\nstation,станция\ndad,папа\nbread,хлеб\ncharge,взимать\nproper,собственно\nbar,бар\noffer,предложение\nsegment,сегмент\nslave,раб\nduck,утка\ninstant,растворимый\nmarket,рынок\ndegree,степень\npopulate,заселять\nchick,цыпленок\ndear,дорогой\nenemy,враг\nreply,ответ\ndrink,напиток\noccur,происходить\nsupport,поддержка\nspeech,речь\nnature,природа\nrange,диапазон\nsteam,пара\nmotion,движение\npath,путь\nliquid,жидкости\nlog,войти\nmeant,означало\nquotient,фактор\nteeth,зубы\nshell,оболочка\nneck,шея\noxygen,кислорода\nsugar,сахар\ndeath,смерть\npretty,довольно\nskill,умение\nwomen,женщины\nseason,сезон\nsolution,решение\nmagnet,магнит\nsilver,серебро\nthank,спасибо\nbranch,филиал\nmatch,матч\nsuffix,суффикс\nespecially,особенно\nfig,рис\nafraid,боится\nhuge,огромный\nsister,сестра\nsteel,сталь\ndiscuss,обсуждать\nforward,вперед\nsimilar,похожи\nguide,направлять\nexperience,опыт\nscore,счет\napple,яблоко\nbought,купленный\nled,привело\npitch,шаг\ncoat,пальто\nmass,масса\ncard,карта\nband,полоса\nrope,веревка\nslip,скольжение\nwin,выиграть\ndream,мечтать\nevening,вечер\ncondition,состояние\nfeed,корма\ntool,инструмент\ntotal,общий\nbasic,основной\nsmell,запах\nvalley,долина\nnor,ни\ndouble,двойной\nseat,сиденья\ncontinue,продолжать\nblock,блок\nchart,диаграмма\nhat,шляпа\nsell,продать\nsuccess,успех\ncompany,компания\nsubtract,вычитать\nevent,мероприятие\nparticular,частности\ndeal,сделка\nswim,плавать\nterm,термин\nopposite,напротив\nwife,жена\nshoe,обуви\nshoulder,плечо\nspread,распространение\narrange,организовать\ncamp,лагерь\ninvent,изобретать\ncotton,хлопок\nborn,родившийся\ndetermine,определять\nquart,кварта\nnine,девять\ntruck,грузовик\nnoise,шум\nlevel,уровень\nchance,шанс\ngather,собирать\nshop,магазин\nstretch,протяжение\nthrow,бросать\nshine,блеск\nproperty,имущество\ncolumn,колонка\nmolecule,молекула\nselect,выбирать\nwrong,неправильно\ngray,серый\nrepeat,повторение\nrequire,требовать\nbroad,широкий\nprepare,подготовить\nsalt,соль\nnose,нос\nplural,множественное\nanger,гнев\nclaim,претензии\ncontinent,континент\n/* Add additional words here */"
            },
            "src/com/kovko/dictionary/EngRuHashMapDictionary.java" : {
              "name" : "src/com/kovko/dictionary/EngRuHashMapDictionary.java",
              "placeholders" : [
                {
                  "offset" : 405,
                  "length" : 11,
                  "dependency" : {
                    "lesson" : "Translator App",
                    "task" : "Part 4",
                    "file" : "src/com/kovko/dictionary/EngRuHashMapDictionary.java",
                    "placeholder" : 0,
                    "is_visible" : false
                  },
                  "possible_answer" : "стол",
                  "placeholder_text" : "translation"
                },
                {
                  "offset" : 446,
                  "length" : 4,
                  "dependency" : {
                    "lesson" : "Translator App",
                    "task" : "Part 4",
                    "file" : "src/com/kovko/dictionary/EngRuHashMapDictionary.java",
                    "placeholder" : 1,
                    "is_visible" : false
                  },
                  "possible_answer" : "money",
                  "placeholder_text" : "word"
                },
                {
                  "offset" : 502,
                  "length" : 11,
                  "dependency" : {
                    "lesson" : "Translator App",
                    "task" : "Part 4",
                    "file" : "src/com/kovko/dictionary/EngRuHashMapDictionary.java",
                    "placeholder" : 2,
                    "is_visible" : false
                  },
                  "possible_answer" : "компьютер",
                  "placeholder_text" : "translation"
                },
                {
                  "offset" : 543,
                  "length" : 4,
                  "dependency" : {
                    "lesson" : "Translator App",
                    "task" : "Part 4",
                    "file" : "src/com/kovko/dictionary/EngRuHashMapDictionary.java",
                    "placeholder" : 3,
                    "is_visible" : false
                  },
                  "possible_answer" : "road",
                  "placeholder_text" : "word"
                }
              ],
              "is_visible" : true,
              "text" : "package com.kovko.dictionary;\n\nimport java.util.HashMap;\nimport java.util.Locale;\n\npublic class EngRuHashMapDictionary implements Dictionary {\n\n    private final HashMap<String, String> translations;\n\n    public EngRuHashMapDictionary() {\n        translations = new HashMap<>();\n        translations.put(\"car\", \"автомобиль\");\n        translations.put(\"window\", \"окно\");\n        translations.put(\"table\", \"translation\");\n        translations.put(\"word\", \"деньги\");\n        translations.put(\"computer\", \"translation\");\n        translations.put(\"word\", \"дорога\");\n    }\n\n    @Override\n    public String lookUp(String text) {\n        return translations.get(text.toLowerCase(Locale.US).trim());\n    }\n}\n"
            },
            "src/com/kovko/dictionary/EngRuCsvFileDictionary.java" : {
              "name" : "src/com/kovko/dictionary/EngRuCsvFileDictionary.java",
              "placeholders" : [
                {
                  "offset" : 438,
                  "length" : 15,
                  "dependency" : {
                    "lesson" : "Translator App",
                    "task" : "Part 4",
                    "file" : "src/com/kovko/dictionary/EngRuCsvFileDictionary.java",
                    "placeholder" : 0,
                    "is_visible" : false
                  },
                  "possible_answer" : "String fileName, String charsetName, String sourceLanguage, String targetLanguage",
                  "placeholder_text" : "String fileName"
                },
                {
                  "offset" : 499,
                  "length" : 7,
                  "dependency" : {
                    "lesson" : "Translator App",
                    "task" : "Part 4",
                    "file" : "src/com/kovko/dictionary/EngRuCsvFileDictionary.java",
                    "placeholder" : 1,
                    "is_visible" : false
                  },
                  "possible_answer" : "charsetName",
                  "placeholder_text" : "\"UTF-8\""
                },
                {
                  "offset" : 550,
                  "length" : 4,
                  "dependency" : {
                    "lesson" : "Translator App",
                    "task" : "Part 4",
                    "file" : "src/com/kovko/dictionary/EngRuCsvFileDictionary.java",
                    "placeholder" : 2,
                    "is_visible" : false
                  },
                  "possible_answer" : "sourceLanguage",
                  "placeholder_text" : "\"us\""
                },
                {
                  "offset" : 598,
                  "length" : 4,
                  "dependency" : {
                    "lesson" : "Translator App",
                    "task" : "Part 4",
                    "file" : "src/com/kovko/dictionary/EngRuCsvFileDictionary.java",
                    "placeholder" : 3,
                    "is_visible" : false
                  },
                  "possible_answer" : "targetLanguage",
                  "placeholder_text" : "\"ru\""
                }
              ],
              "is_visible" : true,
              "text" : "package com.kovko.dictionary;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.nio.charset.Charset;\nimport java.util.HashMap;\nimport java.util.Locale;\n\npublic class EngRuCsvFileDictionary implements Dictionary {\n\n    private static final String DELIMITER = \",\";\n    private final HashMap<String, String> translations;\n\n    public EngRuCsvFileDictionary(String fileName) {\n        Charset charset = Charset.forName(\"UTF-8\");\n        Locale sourceLocale = new Locale(\"us\");\n        Locale targetLocale = new Locale(\"ru\");\n        translations = new HashMap<>();\n\n        try (InputStream stream = getClass().getClassLoader().getResourceAsStream(fileName);\n             InputStreamReader inputStreamReader = new InputStreamReader(stream, charset);\n             BufferedReader reader = new BufferedReader(inputStreamReader)) {\n            for (String line = reader.readLine(); line != null; line = reader.readLine()) {\n                String[] words = line.split(DELIMITER);\n                if (words.length == 2) {\n                    String word = words[0].toLowerCase(sourceLocale).strip();\n                    String translation = words[1].toLowerCase(targetLocale).strip();\n                    translations.put(word, translation);\n                }\n            }\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    @Override\n    public String lookUp(String text) {\n        return translations.get(text.toLowerCase(Locale.US).trim());\n    }\n}\n"
            },
            "test/Tests.java" : {
              "name" : "test/Tests.java",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import org.junit.jupiter.api.Test;\nimport com.kovko.translator.Translator;\n\nimport static org.assertj.core.api.AssertionsForInterfaceTypes.assertThat;\n\nclass Tests {\n\n    @Test\n    void testConstructor() {\n        for (java.lang.reflect.Constructor<?> declaredConstructor : Translator.class.getDeclaredConstructors()) {\n            int parameterCount = declaredConstructor.getParameterCount();\n            assertThat(parameterCount)\n                    .as(\"There should be four parameters in the Translator.\\n\" +\n                            \"One for file name, one for charset file is using,\\n\" +\n                            \"and the last two for the locales of source and target languages\")\n                    .isEqualTo(4);\n        }\n    }\n\n}"
            }
          },
          "description_text" : "We managed to satisfy all the previous requirements, however, the code become a bit tangled.\nAs the application now can provide a support for many different languages and encodings,\nour employer decided that now we have to provide this power to the users.\nWe need give everyone the opportunity to provide their own dictionary.\n<hr>\nThere some new requirements, mainly users should be able to change and define:\n<ol>\n    <li>Dictionary file name and location</li>\n    <li>Dictionary charset</li>\n    <li>Source language locale</li>\n    <li>Target language locale</li>\n</ol>\n<hr>\nIn order to fulfil all the requirements we needed to break the compatibility with previous versions.\nThe company decided to go for this, as these new changes should provide us with an edge in the industry.\nHowever, this also will decrease the number of users for some time,\nbut overall the company decided that it worth the price of several angry users.",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Part 6",
          "files" : {
            "src/com/kovko/runner/Main.java" : {
              "name" : "src/com/kovko/runner/Main.java",
              "placeholders" : [
                {
                  "offset" : 27,
                  "length" : 39,
                  "possible_answer" : "import com.kovko.translator.Translator;\nimport com.kovko.dictionary.Dictionary;\nimport com.kovko.dictionary.EngRuCsvFileDictionary;",
                  "placeholder_text" : "import com.kovko.translator.Translator;"
                },
                {
                  "offset" : 141,
                  "length" : 65,
                  "dependency" : {
                    "lesson" : "Translator App",
                    "task" : "Part 5",
                    "file" : "src/com/kovko/runner/Main.java",
                    "placeholder" : 0,
                    "is_visible" : true
                  },
                  "possible_answer" : "String fileName = args[0];\n        String charsetName = args[1];\n        String sourceLanguage = args[2];\n        String targetLanguage = args[3];\n        Dictionary dictionary = new EngRuCsvFileDictionary(fileName, charsetName, sourceLanguage, targetLanguage);",
                  "placeholder_text" : "/* Read application arguments in order to configure translator */"
                },
                {
                  "offset" : 283,
                  "length" : 0,
                  "dependency" : {
                    "lesson" : "Translator App",
                    "task" : "Part 5",
                    "file" : "src/com/kovko/runner/Main.java",
                    "placeholder" : 1,
                    "is_visible" : true
                  },
                  "possible_answer" : "dictionary",
                  "placeholder_text" : ""
                }
              ],
              "is_visible" : true,
              "text" : "package com.kovko.runner;\n\nimport com.kovko.translator.Translator;\n\npublic class Main {\n    public static void main(String[] args) {\n        /* Read application arguments in order to configure translator */\n        String word = \"car\";\n        Translator translator = new Translator();\n        String translation = translator.translate(word);\n        System.out.println(translation);\n    }\n}\n"
            },
            "src/com/kovko/dictionary/Dictionary.java" : {
              "name" : "src/com/kovko/dictionary/Dictionary.java",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "package com.kovko.dictionary;\n\npublic interface Dictionary {\n    String lookUp(String text);\n}\n"
            },
            "src/com/kovko/translator/Translator.java" : {
              "name" : "src/com/kovko/translator/Translator.java",
              "placeholders" : [
                {
                  "offset" : 31,
                  "length" : 0,
                  "dependency" : {
                    "lesson" : "Translator App",
                    "task" : "Part 5",
                    "file" : "src/com/kovko/translator/Translator.java",
                    "placeholder" : 0,
                    "is_visible" : false
                  },
                  "possible_answer" : "import com.kovko.dictionary.Dictionary;",
                  "placeholder_text" : ""
                },
                {
                  "offset" : 118,
                  "length" : 0,
                  "dependency" : {
                    "lesson" : "Translator App",
                    "task" : "Part 5",
                    "file" : "src/com/kovko/translator/Translator.java",
                    "placeholder" : 1,
                    "is_visible" : true
                  },
                  "possible_answer" : "Dictionary dictionary",
                  "placeholder_text" : ""
                },
                {
                  "offset" : 130,
                  "length" : 10,
                  "possible_answer" : "this.dictionary",
                  "placeholder_text" : "dictionary"
                },
                {
                  "offset" : 143,
                  "length" : 5,
                  "dependency" : {
                    "lesson" : "Translator App",
                    "task" : "Part 5",
                    "file" : "src/com/kovko/translator/Translator.java",
                    "placeholder" : 2,
                    "is_visible" : true
                  },
                  "possible_answer" : "dictionary",
                  "placeholder_text" : "null;"
                }
              ],
              "is_visible" : true,
              "text" : "package com.kovko.translator;\n\n\n\npublic class Translator {\n\n    private Dictionary dictionary;\n\n    public Translator() {\n        dictionary = null;;\n    }\n\n    public String translate(String word) {\n        return dictionary.lookUp(word);\n    }\n}\n"
            },
            "src/main/resources/dictionary.csv" : {
              "name" : "src/main/resources/dictionary.csv",
              "placeholders" : [
                {
                  "offset" : 12998,
                  "length" : 31,
                  "dependency" : {
                    "lesson" : "Translator App",
                    "task" : "Part 5",
                    "file" : "src/main/resources/dictionary.csv",
                    "placeholder" : 0,
                    "is_visible" : false
                  },
                  "possible_answer" : "computer,компьютер\nprogrammer,программист\nmouse,мышь",
                  "placeholder_text" : "/* Add additional words here */"
                }
              ],
              "is_visible" : true,
              "text" : "as,как\nI,Я\nhis,его\nthat,что\nhe,он\nwas,было\nfor,для\non,на\nare,являются\nwith,с\nthey,они\nbe,быть\nat,в\none,один\nhave,иметь\nthis,это\nfrom,от\nby,по\nword,слово\nbut,но\nwhat,что\nsome,некоторые\nis,является\nit,это\nyou,вы\nor,или\nhad,было\nthe,площадь\nof,из\nto,гора\nand,и\na,основной\nin,взял\nwe,мы\ncan,может\nout,из\nother,другой\nwere,были\nwhich,который\ndo,сделать\ntheir,их\ntime,время\nif,если\nwill,будет\nhow,как\nsaid,указанный\nan,назад\neach,каждый\ntell,сказать\ndoes,делает\nset,набор\nthree,три\nwant,хочу\nair,воздух\nwell,хорошо\nalso,также\nplay,играть\nsmall,небольшой\nend,конец\nput,положить\nhome,домой\nread,читать\nhand,рука\nport,порт\nlarge,большой\nspell,заклинание\nadd,добавлять\neven,даже\nland,земля\nhere,здесь\nmust,должны\nbig,большой\nhigh,высокий\nsuch,такие\nfollow,следовать\nact,акт\nwhy,почему\nask,спросите\nmen,люди\nchange,изменение\nwent,пошел\nlight,свет\nkind,вид\noff,от\nneed,нуждаться\nhouse,дом\npicture,картинка\ntry,пытаться\nus,нам\nagain,снова\nanimal,животных\npoint,точка\nmother,мать\nworld,мир\nnear,около\nbuild,строить\nself,самостоятельно\nearth,земля\nfather,отец\nany,любой\nnew,новый\nwork,работа\npart,часть\ntake,принимать\nget,получать\nplace,место\nmade,сделал\nlive,жить\nwhere,где\nafter,после\nback,назад\nlittle,немного\nonly,только\nround,круглый\nman,человек\nyear,год\ncame,пришел\nshow,шоу\nevery,каждый\ngood,хорошее\nme,меня\ngive,давать\nour,наш\nunder,под\nname,название\nvery,очень\nthrough,через\njust,просто\nform,форма\nsentence,приговор\ngreat,большой\nthink,думать\nsay,сказать\nhelp,помощь\nlow,низкий\nline,линия\ndiffer,отличаются\nturn,поворот\ncause,причиной\nmuch,много\nmean,означать\nbefore,до\nmove,движение\nright,право\nboy,мальчик\nold,старый\ntoo,слишком\nsame,же\nshe,она\nall,все\nthere,там\nwhen,когда\nup,вверх\nuse,использование\nyour,ваш\nway,способ\nabout,о\nmany,многие\nthen,затем\nthem,их\nwrite,запись\nwould,бы\nlike,подобно\nso,так\nthese,эти\nher,ее\nlong,долго\nmake,сделать\nthing,вещь\nsee,посмотреть\nhim,его\ntwo,два\nhas,имеет\nlook,искать\nmore,еще\nday,день\ncould,мог\ngo,идти\ncome,приходят\ndid,сделал\nnumber,число\nsound,звук\nno,нет\nmost,наиболее\npeople,люди\nmy,мой\nover,над\nknow,знать\nwater,вода\nthan,чем\ncall,вызов\nfirst,первый\nwho,кто\nmay,может\ndown,вниз\nside,сторона\nbeen,был\nnow,сейчас\nfind,находить\nhead,руководитель\nstand,стоять\nown,самостоятельно\npage,страница\nshould,должны\ncountry,страна\nfound,найдено\nanswer,ответ\nschool,школа\ngrow,расти\nstudy,исследование\nstill,еще\nlearn,учиться\nplant,завод\ncover,крышка\nfood,еда\nsun,солнце\nfour,четыре\nbetween,между\nstate,состояние\nkeep,держать\neye,глаз\nnever,никогда не\nlast,Последнее\nlet,позволять\nthought,мысль\ncity,город\ntree,дерево\ncross,пересекают\nfarm,ферма\nhard,трудно\nstart,начало\nmight,мощи\nstory,история\nsaw,пила\nfar,далеко\nsea,море\ndraw,привлечь\nleft,слева\nlate,поздно\nrun,запустить\ndon’t,не\nwhile,в то время как\npress,нажмите\nclose,близко\nnight,ночь\nreal,реальный\nlife,жизнь\nfew,несколько\nnorth,к северу\nbook,книга\ncarry,нести\ntook,взял\nscience,наука\neat,есть\nroom,номер\nfriend,друг\nbegan,начал\nidea,идея\nfish,рыба\nmountain,гора\nstop,остановить\nonce,раз\nbase,база\nhear,слышать\nhorse,лошадь\ncut,вырезать\nsure,уверен\nwatch,смотреть\ncolor,цвет\nface,лицо\nwood,дерево\nmain,основной\nopen,открыт\nseem,кажется\ntogether,вместе\nnext,следующий\nwhite,белый\nchildren,дети\nbegin,начать\ngot,получил\nwalk,ходить\nexample,пример\nease,легкость\npaper,бумага\ngroup,группа\nalways,всегда\nmusic,музыка\nthose,\"тех,\"\nboth,как\nmark,знак\noften,часто\nletter,письмо\nuntil,до\nmile,км\nriver,река\ncar,автомобиль\nfeet,футов\ncare,уход\nsecond,Второй\nenough,достаточно\nplain,равнина\ngirl,девушка\nusual,обычно\nyoung,молодой\nready,готовый\nabove,выше\never,когда-либо\nred,красный\nlist,список\nthough,хотя\nfeel,чувствовать\ntalk,разговор\nbird,птица\nsoon,скоро\nbody,тело\ndog,собака\nfamily,семья\ndirect,прямой\npose,представляют\nleave,оставить\nsong,песня\nmeasure,измерять\ndoor,дверь\nproduct,продукт\nblack,черный\nshort,короткая\nnumeral,цифра\nclass,класс\nwind,ветер\nquestion,вопрос\nhappen,произойдет\ncomplete,полная\nship,корабль\narea,площадь\nhalf,половина\nrock,рок\norder,порядок\nfire,огонь\nsouth,юг\nproblem,проблема\npiece,кусок\ntold,сказал\nknew,знал\npass,проходить\nsince,с\ntop,топ\nwhole,весь\nking,король\nstreet,улица\ninch,дюйм\nmultiply,умножить\nnothing,ничего\ncourse,курс\nstay,оставаться\nwheel,колеса\nfull,полный\nforce,сила\nblue,синий\nobject,объект\ndecide,решать\nsurface,поверхность\ndeep,глубоко\nmoon,луна\nisland,остров\nfoot,фут\nsystem,система\nbusy,занято\ntest,тест\nrecord,запись\nboat,лодка\ncommon,общая\ngold,золото\npossible,возможно\nplane,самолет\nstead,вместо него\ndry,сухой\nwonder,Интересно\nlaugh,смех\nthousand,тыс\nago,назад\nran,побежал\ncheck,проверять\ngame,игра\nshape,форма\nequate,приравнять\nhot,горячий\nmiss,мисс\nbrought,принес\nheat,тепло\nsnow,снег\ntire,шина\nbring,приносить\nyes,да\ndistant,удаленная\nfill,заполнить\neast,восток\npaint,краска\nlanguage,язык\namong,среди\nunit,блок\npower,мощность\ntown,город\nfine,отлично\ncertain,уверен\nfly,летать\nfall,падать\nlead,привести\ncry,крик\ndark,темно\nmachine,машина\nnote,примечание\nwait,ждать\nplan,план\nfigure,фигура\nstar,звезда\nbox,коробка\nnoun,существительное\nfield,поле\nrest,остальные\ncorrect,верный\nable,состоянии\npound,фунт\ndone,сделано\nbeauty,красота\ndrive,привод\nstood,стоял\ncontain,содержать\nfront,передние\nteach,учить\nweek,неделя\nfinal,окончательный\ngave,дал\ngreen,зеленый\noh,ой\nquick,быстро\ndevelop,развивать\nocean,океан\nwarm,теплый\nfree,бесплатно\nminute,минут\nstrong,сильный\nspecial,специальный\nmind,ум\nbehind,за\nclear,ясно\ntail,хвост\nproduce,производить\nfact,факт\nspace,пространство\nheard,слышал\nbest,лучше\nhour,час\nbetter,лучше\nTRUE,правда\nduring,во\nhundred,сто\nfive,пять\nremember,запомнить\nstep,шаг\nearly,рано\nhold,удерживайте\nwest,запад\nground,земля\ninterest,интерес\nreach,достичь\nfast,быстро\nverb,глагол\nsing,петь\nlisten,слушать\nsix,шесть\ntable,стол\ntravel,поездки\nless,меньше\nmorning,утро\nten,десять\nsimple,простой\nseveral,несколько\nvowel,гласный\ntoward,к\nwar,война\nlay,заложить\nagainst,против\npattern,шаблон\nslow,медленно\ncenter,центр\nlove,любовь\nperson,человек\nmoney,деньги\nserve,служить\nappear,появляются\nroad,дорога\nmap,карта\nrain,дождь\nrule,правило\ngovern,управлять\npull,тянуть\ncold,холодный\nnotice,уведомление\nvoice,голос\nenergy,энергия\nhunt,охота\nprobable,вероятный\nbed,кровать\nbrother,брат\negg,яйцо\nride,поездка\ncell,клеток\nbelieve,верить\nperhaps,\"возможно,\"\npick,выбрать\nsudden,внезапный\ncount,считать\nsquare,Квадратный\nreason,причина\nlength,длина\nrepresent,представлять\nart,искусство\nsubject,Заголовок\nregion,область\nsize,размер\nvary,меняться\nsettle,урегулировать\nspeak,говорить\nweight,вес\ngeneral,общий\nice,лед\nmatter,дело\ncircle,круг\npair,пара\ninclude,включают\ndivide,разделяй\nsyllable,слог\nfelt,чувствовал\ngrand,великий\nball,мяч\nyet,еще\nwave,волна\ndrop,падение\nheart,сердце\nam,утра\npresent,присутствует\nheavy,тяжелый\ndance,танец\nengine,двигатель\nposition,положение\narm,рука\nwide,широкий\nsail,парус\nmaterial,материал\nfraction,доля\nforest,лес\nsit,сидеть\nrace,гонка\nwindow,окно\nstore,магазин\nsummer,лето\ntrain,поезд\nsleep,сон\nprove,доказывать\nlone,одинокий\nleg,нога\nexercise,упражнение\nwall,стена\ncatch,улов\nmount,крепление\nwish,хотите\nsky,небо\nboard,доска\njoy,радость\nwinter,зима\nsat,Сб\nwritten,написанный\nwild,дикий\ninstrument,инструмент\nkept,хранится\nglass,стекло\ngrass,трава\ncow,корова\njob,работа\nedge,край\nsign,знак\nvisit,визит\npast,мимо\nsoft,мягкая\nfun,весело\nbright,яркий\ngas,газа\nweather,погода\nmonth,месяц\nmillion,миллион\nbear,нести\nfinish,отделка\nhappy,счастливы\nhope,надеюсь\nflower,цветок\nclothe,одевать\nstrange,странный\ngone,ушел\ntrade,торговля\nmelody,мелодия\ntrip,поездка\noffice,офис\nreceive,получать\nrow,строка\nmouth,рот\nexact,точный\nsymbol,символ\ndie,умереть\nleast,мере\ntrouble,беда\nshout,крик\nexcept,кроме\nwrote,писал\nseed,семян\ntone,тон\njoin,присоединиться\nsuggest,предложить\nclean,чистый\nbreak,перерыв\nlady,леди\nyard,двор\nrise,подниматься\nbad,плохо\nblow,удар\noil,масло\nblood,кровь\ntouch,коснуться\ngrew,выросла\ncent,цент\nmix,смешивать\nteam,команда\nwire,провод\ncost,Стоимость\nlost,потерянный\nbrown,коричневый\nwear,носить\ngarden,сад\nequal,равный\nsent,отправлено\nchoose,выбирать\nfell,упал\nfit,соответствовать\nflow,течь\nfair,ярмарка\nbank,банк\ncollect,собирать\nsave,сохранить\ncontrol,контроль\ndecimal,десятичной\near,ухо\nelse,еще\nquite,вполне\nbroke,сломал\ncase,дело\nmiddle,средний\nkill,убивать\nson,сын\nlake,озеро\nmoment,момент\nscale,шкала\nloud,громко\nspring,весна\nobserve,наблюдать\nchild,ребенок\nstraight,прямо\nconsonant,согласный\nnation,нация\ndictionary,словарь\nmilk,молоко\nspeed,скорость\nmethod,метод\norgan,орган\npay,платить\nage,возраст\nsection,раздел\ndress,платье\ncloud,облако\nsurprise,сюрприз\nquiet,тихо\nstone,камень\ntiny,крошечный\nclimb,подъем\ncool,круто\ndesign,дизайн\npoor,бедный\nlot,много\nexperiment,эксперимент\nbottom,снизу\nkey,ключ\niron,железо\nsingle,один\nstick,палка\nflat,плоским\ntwenty,двадцать\nskin,кожа\nsmile,улыбка\ncrease,складка\nhole,отверстие\njump,прыжок\nbaby,ребенок\neight,восемь\nvillage,деревня\nmeet,Знакомства\nroot,корень\nbuy,купить\nraise,поднимать\nsolve,решить\nmetal,металла\nwhether,ли\npush,толчок\nseven,семь\nparagraph,пункт\nthird,третий\nshall,должен\nheld,ручные\nhair,волосы\ndescribe,описывать\ncook,повар\nfloor,этаж\neither,или\nresult,результат\nburn,сжечь\nhill,холм\nsafe,сейф\ncat,кошка\ncentury,век\nconsider,рассматривать\ntype,Тип\nlaw,закон\nbit,немного\ncoast,побережье\ncopy,копия\nphrase,фраза\nsilent,тихий\ntall,высокий\nsand,песок\nsoil,почвы\nroll,рулон\ntemperature,температура\nfinger,палец\nindustry,промышленность\nvalue,значение\nfight,борьба\nlie,ложь\nbeat,бить\nexcite,возбуждать\nnatural,естественный\nview,вид\nsense,смысл\ncapital,капитал\nwon’t,не будет\nchair,стул\ndanger,опасность\nfruit,фрукты\nrich,богатые\nthick,толщиной\nsoldier,солдат\nprocess,процесс\noperate,работать\npractice,практика\nseparate,отдельный\ndifficult,трудный\ndoctor,врач\nplease,пожалуйста\nprotect,защищать\nnoon,полдень\ncrop,урожай\nmodern,современный\nelement,элемент\nhit,хит\nstudent,студент\ncorner,угол\nparty,партия\nsupply,поставка\nwhose,чьи\nlocate,разместить\nring,кольцо\ncharacter,характер\ninsect,насекомое\ncaught,пойманный\nperiod,период\nindicate,указывать\nradio,радио\nspoke,говорил\natom,атом\nhuman,человек\nhistory,история\neffect,эффект\nelectric,электрический\nexpect,ожидать\nbone,кость\nrail,железнодорожные\nimagine,вообразить\nprovide,обеспечить\nagree,соглашаться\nthus,таким образом\ngentle,нежный\nwoman,женщина\ncaptain,капитан\nguess,догадываться\nnecessary,необходимо\nsharp,резкое\nwing,крыло\ncreate,создавать\nneighbor,сосед\nwash,стирка\nbat,летучая мышь\nrather,а\ncrowd,толпа\ncorn,кукуруза\ncompare,сравнить\npoem,стихотворение\nstring,строка\nbell,колокол\ndepend,зависеть\nmeat,мясо\nrub,руб\ntube,трубка\nfamous,известный\ndollar,доллар\nstream,поток\nfear,страх\nsight,зрение\nthin,тонкий\ntriangle,треугольник\nplanet,планета\nhurry,спешить\nchief,главный\ncolony,колония\nclock,часы\nmine,шахта\ntie,связать\nenter,введите\nmajor,основным\nfresh,свежий\nsearch,поиск\nsend,отправить\nyellow,желтый\ngun,пистолет\nallow,позволять\nprint,печать\ndead,мертвый\nspot,место\ndesert,пустыня\nsuit,костюм\ncurrent,ток\nlift,лифт\nrose,выросла\narrive,приходим\nmaster,мастер\ntrack,трек\nparent,родитель\nshore,берег\ndivision,деление\nsheet,лист\nsubstance,вещество\nfavor,пользу\nconnect,подключать\npost,пост\nspend,провести\nchord,аккорд\nfat,жира\nglad,довольный\noriginal,оригинальный\nshare,доля\nstation,станция\ndad,папа\nbread,хлеб\ncharge,взимать\nproper,собственно\nbar,бар\noffer,предложение\nsegment,сегмент\nslave,раб\nduck,утка\ninstant,растворимый\nmarket,рынок\ndegree,степень\npopulate,заселять\nchick,цыпленок\ndear,дорогой\nenemy,враг\nreply,ответ\ndrink,напиток\noccur,происходить\nsupport,поддержка\nspeech,речь\nnature,природа\nrange,диапазон\nsteam,пара\nmotion,движение\npath,путь\nliquid,жидкости\nlog,войти\nmeant,означало\nquotient,фактор\nteeth,зубы\nshell,оболочка\nneck,шея\noxygen,кислорода\nsugar,сахар\ndeath,смерть\npretty,довольно\nskill,умение\nwomen,женщины\nseason,сезон\nsolution,решение\nmagnet,магнит\nsilver,серебро\nthank,спасибо\nbranch,филиал\nmatch,матч\nsuffix,суффикс\nespecially,особенно\nfig,рис\nafraid,боится\nhuge,огромный\nsister,сестра\nsteel,сталь\ndiscuss,обсуждать\nforward,вперед\nsimilar,похожи\nguide,направлять\nexperience,опыт\nscore,счет\napple,яблоко\nbought,купленный\nled,привело\npitch,шаг\ncoat,пальто\nmass,масса\ncard,карта\nband,полоса\nrope,веревка\nslip,скольжение\nwin,выиграть\ndream,мечтать\nevening,вечер\ncondition,состояние\nfeed,корма\ntool,инструмент\ntotal,общий\nbasic,основной\nsmell,запах\nvalley,долина\nnor,ни\ndouble,двойной\nseat,сиденья\ncontinue,продолжать\nblock,блок\nchart,диаграмма\nhat,шляпа\nsell,продать\nsuccess,успех\ncompany,компания\nsubtract,вычитать\nevent,мероприятие\nparticular,частности\ndeal,сделка\nswim,плавать\nterm,термин\nopposite,напротив\nwife,жена\nshoe,обуви\nshoulder,плечо\nspread,распространение\narrange,организовать\ncamp,лагерь\ninvent,изобретать\ncotton,хлопок\nborn,родившийся\ndetermine,определять\nquart,кварта\nnine,девять\ntruck,грузовик\nnoise,шум\nlevel,уровень\nchance,шанс\ngather,собирать\nshop,магазин\nstretch,протяжение\nthrow,бросать\nshine,блеск\nproperty,имущество\ncolumn,колонка\nmolecule,молекула\nselect,выбирать\nwrong,неправильно\ngray,серый\nrepeat,повторение\nrequire,требовать\nbroad,широкий\nprepare,подготовить\nsalt,соль\nnose,нос\nplural,множественное\nanger,гнев\nclaim,претензии\ncontinent,континент\n/* Add additional words here */"
            },
            "src/com/kovko/dictionary/EngRuHashMapDictionary.java" : {
              "name" : "src/com/kovko/dictionary/EngRuHashMapDictionary.java",
              "placeholders" : [
                {
                  "offset" : 405,
                  "length" : 11,
                  "dependency" : {
                    "lesson" : "Translator App",
                    "task" : "Part 5",
                    "file" : "src/com/kovko/dictionary/EngRuHashMapDictionary.java",
                    "placeholder" : 0,
                    "is_visible" : false
                  },
                  "possible_answer" : "стол",
                  "placeholder_text" : "translation"
                },
                {
                  "offset" : 446,
                  "length" : 4,
                  "dependency" : {
                    "lesson" : "Translator App",
                    "task" : "Part 5",
                    "file" : "src/com/kovko/dictionary/EngRuHashMapDictionary.java",
                    "placeholder" : 1,
                    "is_visible" : false
                  },
                  "possible_answer" : "money",
                  "placeholder_text" : "word"
                },
                {
                  "offset" : 502,
                  "length" : 11,
                  "dependency" : {
                    "lesson" : "Translator App",
                    "task" : "Part 5",
                    "file" : "src/com/kovko/dictionary/EngRuHashMapDictionary.java",
                    "placeholder" : 2,
                    "is_visible" : false
                  },
                  "possible_answer" : "компьютер",
                  "placeholder_text" : "translation"
                },
                {
                  "offset" : 543,
                  "length" : 4,
                  "dependency" : {
                    "lesson" : "Translator App",
                    "task" : "Part 5",
                    "file" : "src/com/kovko/dictionary/EngRuHashMapDictionary.java",
                    "placeholder" : 3,
                    "is_visible" : false
                  },
                  "possible_answer" : "road",
                  "placeholder_text" : "word"
                }
              ],
              "is_visible" : true,
              "text" : "package com.kovko.dictionary;\n\nimport java.util.HashMap;\nimport java.util.Locale;\n\npublic class EngRuHashMapDictionary implements Dictionary {\n\n    private final HashMap<String, String> translations;\n\n    public EngRuHashMapDictionary() {\n        translations = new HashMap<>();\n        translations.put(\"car\", \"автомобиль\");\n        translations.put(\"window\", \"окно\");\n        translations.put(\"table\", \"translation\");\n        translations.put(\"word\", \"деньги\");\n        translations.put(\"computer\", \"translation\");\n        translations.put(\"word\", \"дорога\");\n    }\n\n    @Override\n    public String lookUp(String text) {\n        return translations.get(text.toLowerCase(Locale.US).trim());\n    }\n}\n"
            },
            "src/com/kovko/dictionary/EngRuCsvFileDictionary.java" : {
              "name" : "src/com/kovko/dictionary/EngRuCsvFileDictionary.java",
              "placeholders" : [
                {
                  "offset" : 438,
                  "length" : 15,
                  "dependency" : {
                    "lesson" : "Translator App",
                    "task" : "Part 5",
                    "file" : "src/com/kovko/dictionary/EngRuCsvFileDictionary.java",
                    "placeholder" : 0,
                    "is_visible" : false
                  },
                  "possible_answer" : "String fileName, String charsetName, String sourceLanguage, String targetLanguage",
                  "placeholder_text" : "String fileName"
                },
                {
                  "offset" : 499,
                  "length" : 7,
                  "dependency" : {
                    "lesson" : "Translator App",
                    "task" : "Part 5",
                    "file" : "src/com/kovko/dictionary/EngRuCsvFileDictionary.java",
                    "placeholder" : 1,
                    "is_visible" : false
                  },
                  "possible_answer" : "charsetName",
                  "placeholder_text" : "\"UTF-8\""
                },
                {
                  "offset" : 550,
                  "length" : 4,
                  "dependency" : {
                    "lesson" : "Translator App",
                    "task" : "Part 5",
                    "file" : "src/com/kovko/dictionary/EngRuCsvFileDictionary.java",
                    "placeholder" : 2,
                    "is_visible" : false
                  },
                  "possible_answer" : "sourceLanguage",
                  "placeholder_text" : "\"us\""
                },
                {
                  "offset" : 598,
                  "length" : 4,
                  "dependency" : {
                    "lesson" : "Translator App",
                    "task" : "Part 5",
                    "file" : "src/com/kovko/dictionary/EngRuCsvFileDictionary.java",
                    "placeholder" : 3,
                    "is_visible" : false
                  },
                  "possible_answer" : "targetLanguage",
                  "placeholder_text" : "\"ru\""
                }
              ],
              "is_visible" : true,
              "text" : "package com.kovko.dictionary;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.nio.charset.Charset;\nimport java.util.HashMap;\nimport java.util.Locale;\n\npublic class EngRuCsvFileDictionary implements Dictionary {\n\n    private static final String DELIMITER = \",\";\n    private final HashMap<String, String> translations;\n\n    public EngRuCsvFileDictionary(String fileName) {\n        Charset charset = Charset.forName(\"UTF-8\");\n        Locale sourceLocale = new Locale(\"us\");\n        Locale targetLocale = new Locale(\"ru\");\n        translations = new HashMap<>();\n\n        try (InputStream stream = getClass().getClassLoader().getResourceAsStream(fileName);\n             InputStreamReader inputStreamReader = new InputStreamReader(stream, charset);\n             BufferedReader reader = new BufferedReader(inputStreamReader)) {\n            for (String line = reader.readLine(); line != null; line = reader.readLine()) {\n                String[] words = line.split(DELIMITER);\n                if (words.length == 2) {\n                    String word = words[0].toLowerCase(sourceLocale).strip();\n                    String translation = words[1].toLowerCase(targetLocale).strip();\n                    translations.put(word, translation);\n                }\n            }\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    @Override\n    public String lookUp(String text) {\n        return translations.get(text.toLowerCase(Locale.US).trim());\n    }\n}\n"
            },
            "test/Tests.java" : {
              "name" : "test/Tests.java",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nclass Tests {\n    @Test\n    void testConstructor() {\n        for (java.lang.reflect.Constructor<?> declaredConstructor : com.kovko.translator.Translator.class.getDeclaredConstructors()) {\n            int parameterCount = declaredConstructor.getParameterCount();\n            assertThat(parameterCount)\n                    .as(\"There should only one parameter in the Translator.\\n\" +\n                            \"The instance of Dictionary should be passed to the constructor.\\n\")\n                    .isEqualTo(1);\n        }\n    }\n}"
            },
            "src/com/kovko/dictionary/DictProtocolDictionary.java" : {
              "name" : "src/com/kovko/dictionary/DictProtocolDictionary.java",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "package com.kovko.dictionary;\n\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.OutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.Writer;\nimport java.net.Socket;\nimport java.nio.charset.Charset;\nimport java.nio.charset.StandardCharsets;\n\npublic class DictProtocolDictionary implements Dictionary {\n\n    private static final int PORT = 2628;\n    private static final int TIMEOUT = 15000;\n    private static final String DEFINITION_FORMAT = \"DEFINE %s %s\\r\\n\";\n    private final String host;\n    private final String dictionary;\n\n    public DictProtocolDictionary(String host, String dictionary) {\n        this.host = host;\n        this.dictionary = dictionary;\n    }\n\n    @Override\n    public String lookUp(String text) {\n        String definition;\n        try (Socket socket = new Socket(host, PORT)){\n            socket.setSoTimeout(TIMEOUT);\n            Writer writer = getWriter(socket, StandardCharsets.UTF_8);\n            BufferedReader reader = getReader(socket, StandardCharsets.UTF_8);\n            definition = define(text, writer, reader);\n            quit(writer);\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n        return definition;\n    }\n\n    private String define(String word, Writer writer, BufferedReader reader) throws IOException {\n        StringBuilder stringBuilder = new StringBuilder();\n        writer.write(String.format(DEFINITION_FORMAT, dictionary, word));\n        writer.flush();\n        for (String line = reader.readLine(); line != null; line = reader.readLine()) {\n            // If there no definition for this word, we don't provide anything\n            if (line.startsWith(\"552 \")) { // no match\n                System.out.println(\"No definition found for: \" + word);\n                break;\n                // All the status lines should be ignored\n            } else if (line.matches(\"(\\\\d){3}.*\")){\n                continue;\n                // The line which contains only . shows that this is the end of the data\n            } else if (line.trim().equals(\".\")) {\n                break;\n                // We append all the translation to the initial StringBuilder\n            } else {\n                stringBuilder.append(line);\n            }\n        }\n        return stringBuilder.toString();\n    }\n\n    private void quit(Writer writer) throws IOException {\n        writer.write(\"quit\\r\\n\");\n        writer.flush();\n    }\n\n    private BufferedReader getReader(Socket socket, Charset charset) throws IOException {\n        InputStream inputStream = socket.getInputStream();\n        InputStreamReader inputStreamReader = new InputStreamReader(inputStream, charset);\n        return new BufferedReader(inputStreamReader);\n    }\n\n    private Writer getWriter(Socket socket, Charset charset) throws IOException {\n        OutputStream outputStream = socket.getOutputStream();\n        Writer writer = new OutputStreamWriter(outputStream, charset);\n        return new BufferedWriter(writer);\n    }\n}\n"
            }
          },
          "description_text" : "Users really liked new feature in the application despite the fact that they lost some level of compatibility,\nmany of them found that this new feature that allowed them to configure the application really helped.\nThus the company decided to go further once again, this time, the idea is to use some internet services\nto provide translation. It should allow users to choose the languages, dictionaries and also the services itself.\nThe implementation of such dictionary was already written and the only thing that we need is to allow users\nto choose the needed implementation.\n<hr>\n<ol>\n    <li>Provide users with an opportunity to use all of the previous implementation, based on their needs</li>\n</ol>\n",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Part 7",
          "files" : {
            "src/com/kovko/runner/Main.java" : {
              "name" : "src/com/kovko/runner/Main.java",
              "placeholders" : [
                {
                  "offset" : 27,
                  "length" : 39,
                  "dependency" : {
                    "lesson" : "Translator App",
                    "task" : "Part 6",
                    "file" : "src/com/kovko/runner/Main.java",
                    "placeholder" : 2,
                    "is_visible" : true
                  },
                  "possible_answer" : "import com.kovko.translator.Translator;\nimport com.kovko.dictionary.Dictionary;\nimport com.kovko.dictionary.DictProtocolDictionary;",
                  "placeholder_text" : "import com.kovko.translator.Translator;"
                },
                {
                  "offset" : 141,
                  "length" : 65,
                  "dependency" : {
                    "lesson" : "Translator App",
                    "task" : "Part 6",
                    "file" : "src/com/kovko/runner/Main.java",
                    "placeholder" : 0,
                    "is_visible" : true
                  },
                  "possible_answer" : "String host = args[0];\n        String dictionaryName = args[1];\n        Dictionary dictionary = new DictProtocolDictionary(host, dictionaryName);",
                  "placeholder_text" : "/* Read application arguments in order to configure translator */"
                },
                {
                  "offset" : 283,
                  "length" : 0,
                  "dependency" : {
                    "lesson" : "Translator App",
                    "task" : "Part 6",
                    "file" : "src/com/kovko/runner/Main.java",
                    "placeholder" : 1,
                    "is_visible" : false
                  },
                  "possible_answer" : "dictionary",
                  "placeholder_text" : ""
                }
              ],
              "is_visible" : true,
              "text" : "package com.kovko.runner;\n\nimport com.kovko.translator.Translator;\n\npublic class Main {\n    public static void main(String[] args) {\n        /* Read application arguments in order to configure translator */\n        String word = \"car\";\n        Translator translator = new Translator();\n        String translation = translator.translate(word);\n        System.out.println(translation);\n    }\n}\n"
            },
            "src/com/kovko/dictionary/Dictionary.java" : {
              "name" : "src/com/kovko/dictionary/Dictionary.java",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "package com.kovko.dictionary;\n\npublic interface Dictionary {\n    String lookUp(String text);\n}\n"
            },
            "src/com/kovko/translator/Translator.java" : {
              "name" : "src/com/kovko/translator/Translator.java",
              "placeholders" : [
                {
                  "offset" : 31,
                  "length" : 0,
                  "dependency" : {
                    "lesson" : "Translator App",
                    "task" : "Part 6",
                    "file" : "src/com/kovko/translator/Translator.java",
                    "placeholder" : 0,
                    "is_visible" : false
                  },
                  "possible_answer" : "import com.kovko.dictionary.Dictionary;",
                  "placeholder_text" : ""
                },
                {
                  "offset" : 118,
                  "length" : 0,
                  "dependency" : {
                    "lesson" : "Translator App",
                    "task" : "Part 6",
                    "file" : "src/com/kovko/translator/Translator.java",
                    "placeholder" : 1,
                    "is_visible" : false
                  },
                  "possible_answer" : "Dictionary dictionary",
                  "placeholder_text" : ""
                },
                {
                  "offset" : 130,
                  "length" : 10,
                  "dependency" : {
                    "lesson" : "Translator App",
                    "task" : "Part 6",
                    "file" : "src/com/kovko/translator/Translator.java",
                    "placeholder" : 3,
                    "is_visible" : false
                  },
                  "possible_answer" : "this.dictionary",
                  "placeholder_text" : "dictionary"
                },
                {
                  "offset" : 143,
                  "length" : 5,
                  "dependency" : {
                    "lesson" : "Translator App",
                    "task" : "Part 6",
                    "file" : "src/com/kovko/translator/Translator.java",
                    "placeholder" : 2,
                    "is_visible" : false
                  },
                  "possible_answer" : "dictionary",
                  "placeholder_text" : "null;"
                }
              ],
              "is_visible" : true,
              "text" : "package com.kovko.translator;\n\n\n\npublic class Translator {\n\n    private Dictionary dictionary;\n\n    public Translator() {\n        dictionary = null;;\n    }\n\n    public String translate(String word) {\n        return dictionary.lookUp(word);\n    }\n}\n"
            },
            "src/main/resources/dictionary.csv" : {
              "name" : "src/main/resources/dictionary.csv",
              "placeholders" : [
                {
                  "offset" : 12998,
                  "length" : 31,
                  "dependency" : {
                    "lesson" : "Translator App",
                    "task" : "Part 6",
                    "file" : "src/main/resources/dictionary.csv",
                    "placeholder" : 0,
                    "is_visible" : false
                  },
                  "possible_answer" : "computer,компьютер\nprogrammer,программист\nmouse,мышь",
                  "placeholder_text" : "/* Add additional words here */"
                }
              ],
              "is_visible" : true,
              "text" : "as,как\nI,Я\nhis,его\nthat,что\nhe,он\nwas,было\nfor,для\non,на\nare,являются\nwith,с\nthey,они\nbe,быть\nat,в\none,один\nhave,иметь\nthis,это\nfrom,от\nby,по\nword,слово\nbut,но\nwhat,что\nsome,некоторые\nis,является\nit,это\nyou,вы\nor,или\nhad,было\nthe,площадь\nof,из\nto,гора\nand,и\na,основной\nin,взял\nwe,мы\ncan,может\nout,из\nother,другой\nwere,были\nwhich,который\ndo,сделать\ntheir,их\ntime,время\nif,если\nwill,будет\nhow,как\nsaid,указанный\nan,назад\neach,каждый\ntell,сказать\ndoes,делает\nset,набор\nthree,три\nwant,хочу\nair,воздух\nwell,хорошо\nalso,также\nplay,играть\nsmall,небольшой\nend,конец\nput,положить\nhome,домой\nread,читать\nhand,рука\nport,порт\nlarge,большой\nspell,заклинание\nadd,добавлять\neven,даже\nland,земля\nhere,здесь\nmust,должны\nbig,большой\nhigh,высокий\nsuch,такие\nfollow,следовать\nact,акт\nwhy,почему\nask,спросите\nmen,люди\nchange,изменение\nwent,пошел\nlight,свет\nkind,вид\noff,от\nneed,нуждаться\nhouse,дом\npicture,картинка\ntry,пытаться\nus,нам\nagain,снова\nanimal,животных\npoint,точка\nmother,мать\nworld,мир\nnear,около\nbuild,строить\nself,самостоятельно\nearth,земля\nfather,отец\nany,любой\nnew,новый\nwork,работа\npart,часть\ntake,принимать\nget,получать\nplace,место\nmade,сделал\nlive,жить\nwhere,где\nafter,после\nback,назад\nlittle,немного\nonly,только\nround,круглый\nman,человек\nyear,год\ncame,пришел\nshow,шоу\nevery,каждый\ngood,хорошее\nme,меня\ngive,давать\nour,наш\nunder,под\nname,название\nvery,очень\nthrough,через\njust,просто\nform,форма\nsentence,приговор\ngreat,большой\nthink,думать\nsay,сказать\nhelp,помощь\nlow,низкий\nline,линия\ndiffer,отличаются\nturn,поворот\ncause,причиной\nmuch,много\nmean,означать\nbefore,до\nmove,движение\nright,право\nboy,мальчик\nold,старый\ntoo,слишком\nsame,же\nshe,она\nall,все\nthere,там\nwhen,когда\nup,вверх\nuse,использование\nyour,ваш\nway,способ\nabout,о\nmany,многие\nthen,затем\nthem,их\nwrite,запись\nwould,бы\nlike,подобно\nso,так\nthese,эти\nher,ее\nlong,долго\nmake,сделать\nthing,вещь\nsee,посмотреть\nhim,его\ntwo,два\nhas,имеет\nlook,искать\nmore,еще\nday,день\ncould,мог\ngo,идти\ncome,приходят\ndid,сделал\nnumber,число\nsound,звук\nno,нет\nmost,наиболее\npeople,люди\nmy,мой\nover,над\nknow,знать\nwater,вода\nthan,чем\ncall,вызов\nfirst,первый\nwho,кто\nmay,может\ndown,вниз\nside,сторона\nbeen,был\nnow,сейчас\nfind,находить\nhead,руководитель\nstand,стоять\nown,самостоятельно\npage,страница\nshould,должны\ncountry,страна\nfound,найдено\nanswer,ответ\nschool,школа\ngrow,расти\nstudy,исследование\nstill,еще\nlearn,учиться\nplant,завод\ncover,крышка\nfood,еда\nsun,солнце\nfour,четыре\nbetween,между\nstate,состояние\nkeep,держать\neye,глаз\nnever,никогда не\nlast,Последнее\nlet,позволять\nthought,мысль\ncity,город\ntree,дерево\ncross,пересекают\nfarm,ферма\nhard,трудно\nstart,начало\nmight,мощи\nstory,история\nsaw,пила\nfar,далеко\nsea,море\ndraw,привлечь\nleft,слева\nlate,поздно\nrun,запустить\ndon’t,не\nwhile,в то время как\npress,нажмите\nclose,близко\nnight,ночь\nreal,реальный\nlife,жизнь\nfew,несколько\nnorth,к северу\nbook,книга\ncarry,нести\ntook,взял\nscience,наука\neat,есть\nroom,номер\nfriend,друг\nbegan,начал\nidea,идея\nfish,рыба\nmountain,гора\nstop,остановить\nonce,раз\nbase,база\nhear,слышать\nhorse,лошадь\ncut,вырезать\nsure,уверен\nwatch,смотреть\ncolor,цвет\nface,лицо\nwood,дерево\nmain,основной\nopen,открыт\nseem,кажется\ntogether,вместе\nnext,следующий\nwhite,белый\nchildren,дети\nbegin,начать\ngot,получил\nwalk,ходить\nexample,пример\nease,легкость\npaper,бумага\ngroup,группа\nalways,всегда\nmusic,музыка\nthose,\"тех,\"\nboth,как\nmark,знак\noften,часто\nletter,письмо\nuntil,до\nmile,км\nriver,река\ncar,автомобиль\nfeet,футов\ncare,уход\nsecond,Второй\nenough,достаточно\nplain,равнина\ngirl,девушка\nusual,обычно\nyoung,молодой\nready,готовый\nabove,выше\never,когда-либо\nred,красный\nlist,список\nthough,хотя\nfeel,чувствовать\ntalk,разговор\nbird,птица\nsoon,скоро\nbody,тело\ndog,собака\nfamily,семья\ndirect,прямой\npose,представляют\nleave,оставить\nsong,песня\nmeasure,измерять\ndoor,дверь\nproduct,продукт\nblack,черный\nshort,короткая\nnumeral,цифра\nclass,класс\nwind,ветер\nquestion,вопрос\nhappen,произойдет\ncomplete,полная\nship,корабль\narea,площадь\nhalf,половина\nrock,рок\norder,порядок\nfire,огонь\nsouth,юг\nproblem,проблема\npiece,кусок\ntold,сказал\nknew,знал\npass,проходить\nsince,с\ntop,топ\nwhole,весь\nking,король\nstreet,улица\ninch,дюйм\nmultiply,умножить\nnothing,ничего\ncourse,курс\nstay,оставаться\nwheel,колеса\nfull,полный\nforce,сила\nblue,синий\nobject,объект\ndecide,решать\nsurface,поверхность\ndeep,глубоко\nmoon,луна\nisland,остров\nfoot,фут\nsystem,система\nbusy,занято\ntest,тест\nrecord,запись\nboat,лодка\ncommon,общая\ngold,золото\npossible,возможно\nplane,самолет\nstead,вместо него\ndry,сухой\nwonder,Интересно\nlaugh,смех\nthousand,тыс\nago,назад\nran,побежал\ncheck,проверять\ngame,игра\nshape,форма\nequate,приравнять\nhot,горячий\nmiss,мисс\nbrought,принес\nheat,тепло\nsnow,снег\ntire,шина\nbring,приносить\nyes,да\ndistant,удаленная\nfill,заполнить\neast,восток\npaint,краска\nlanguage,язык\namong,среди\nunit,блок\npower,мощность\ntown,город\nfine,отлично\ncertain,уверен\nfly,летать\nfall,падать\nlead,привести\ncry,крик\ndark,темно\nmachine,машина\nnote,примечание\nwait,ждать\nplan,план\nfigure,фигура\nstar,звезда\nbox,коробка\nnoun,существительное\nfield,поле\nrest,остальные\ncorrect,верный\nable,состоянии\npound,фунт\ndone,сделано\nbeauty,красота\ndrive,привод\nstood,стоял\ncontain,содержать\nfront,передние\nteach,учить\nweek,неделя\nfinal,окончательный\ngave,дал\ngreen,зеленый\noh,ой\nquick,быстро\ndevelop,развивать\nocean,океан\nwarm,теплый\nfree,бесплатно\nminute,минут\nstrong,сильный\nspecial,специальный\nmind,ум\nbehind,за\nclear,ясно\ntail,хвост\nproduce,производить\nfact,факт\nspace,пространство\nheard,слышал\nbest,лучше\nhour,час\nbetter,лучше\nTRUE,правда\nduring,во\nhundred,сто\nfive,пять\nremember,запомнить\nstep,шаг\nearly,рано\nhold,удерживайте\nwest,запад\nground,земля\ninterest,интерес\nreach,достичь\nfast,быстро\nverb,глагол\nsing,петь\nlisten,слушать\nsix,шесть\ntable,стол\ntravel,поездки\nless,меньше\nmorning,утро\nten,десять\nsimple,простой\nseveral,несколько\nvowel,гласный\ntoward,к\nwar,война\nlay,заложить\nagainst,против\npattern,шаблон\nslow,медленно\ncenter,центр\nlove,любовь\nperson,человек\nmoney,деньги\nserve,служить\nappear,появляются\nroad,дорога\nmap,карта\nrain,дождь\nrule,правило\ngovern,управлять\npull,тянуть\ncold,холодный\nnotice,уведомление\nvoice,голос\nenergy,энергия\nhunt,охота\nprobable,вероятный\nbed,кровать\nbrother,брат\negg,яйцо\nride,поездка\ncell,клеток\nbelieve,верить\nperhaps,\"возможно,\"\npick,выбрать\nsudden,внезапный\ncount,считать\nsquare,Квадратный\nreason,причина\nlength,длина\nrepresent,представлять\nart,искусство\nsubject,Заголовок\nregion,область\nsize,размер\nvary,меняться\nsettle,урегулировать\nspeak,говорить\nweight,вес\ngeneral,общий\nice,лед\nmatter,дело\ncircle,круг\npair,пара\ninclude,включают\ndivide,разделяй\nsyllable,слог\nfelt,чувствовал\ngrand,великий\nball,мяч\nyet,еще\nwave,волна\ndrop,падение\nheart,сердце\nam,утра\npresent,присутствует\nheavy,тяжелый\ndance,танец\nengine,двигатель\nposition,положение\narm,рука\nwide,широкий\nsail,парус\nmaterial,материал\nfraction,доля\nforest,лес\nsit,сидеть\nrace,гонка\nwindow,окно\nstore,магазин\nsummer,лето\ntrain,поезд\nsleep,сон\nprove,доказывать\nlone,одинокий\nleg,нога\nexercise,упражнение\nwall,стена\ncatch,улов\nmount,крепление\nwish,хотите\nsky,небо\nboard,доска\njoy,радость\nwinter,зима\nsat,Сб\nwritten,написанный\nwild,дикий\ninstrument,инструмент\nkept,хранится\nglass,стекло\ngrass,трава\ncow,корова\njob,работа\nedge,край\nsign,знак\nvisit,визит\npast,мимо\nsoft,мягкая\nfun,весело\nbright,яркий\ngas,газа\nweather,погода\nmonth,месяц\nmillion,миллион\nbear,нести\nfinish,отделка\nhappy,счастливы\nhope,надеюсь\nflower,цветок\nclothe,одевать\nstrange,странный\ngone,ушел\ntrade,торговля\nmelody,мелодия\ntrip,поездка\noffice,офис\nreceive,получать\nrow,строка\nmouth,рот\nexact,точный\nsymbol,символ\ndie,умереть\nleast,мере\ntrouble,беда\nshout,крик\nexcept,кроме\nwrote,писал\nseed,семян\ntone,тон\njoin,присоединиться\nsuggest,предложить\nclean,чистый\nbreak,перерыв\nlady,леди\nyard,двор\nrise,подниматься\nbad,плохо\nblow,удар\noil,масло\nblood,кровь\ntouch,коснуться\ngrew,выросла\ncent,цент\nmix,смешивать\nteam,команда\nwire,провод\ncost,Стоимость\nlost,потерянный\nbrown,коричневый\nwear,носить\ngarden,сад\nequal,равный\nsent,отправлено\nchoose,выбирать\nfell,упал\nfit,соответствовать\nflow,течь\nfair,ярмарка\nbank,банк\ncollect,собирать\nsave,сохранить\ncontrol,контроль\ndecimal,десятичной\near,ухо\nelse,еще\nquite,вполне\nbroke,сломал\ncase,дело\nmiddle,средний\nkill,убивать\nson,сын\nlake,озеро\nmoment,момент\nscale,шкала\nloud,громко\nspring,весна\nobserve,наблюдать\nchild,ребенок\nstraight,прямо\nconsonant,согласный\nnation,нация\ndictionary,словарь\nmilk,молоко\nspeed,скорость\nmethod,метод\norgan,орган\npay,платить\nage,возраст\nsection,раздел\ndress,платье\ncloud,облако\nsurprise,сюрприз\nquiet,тихо\nstone,камень\ntiny,крошечный\nclimb,подъем\ncool,круто\ndesign,дизайн\npoor,бедный\nlot,много\nexperiment,эксперимент\nbottom,снизу\nkey,ключ\niron,железо\nsingle,один\nstick,палка\nflat,плоским\ntwenty,двадцать\nskin,кожа\nsmile,улыбка\ncrease,складка\nhole,отверстие\njump,прыжок\nbaby,ребенок\neight,восемь\nvillage,деревня\nmeet,Знакомства\nroot,корень\nbuy,купить\nraise,поднимать\nsolve,решить\nmetal,металла\nwhether,ли\npush,толчок\nseven,семь\nparagraph,пункт\nthird,третий\nshall,должен\nheld,ручные\nhair,волосы\ndescribe,описывать\ncook,повар\nfloor,этаж\neither,или\nresult,результат\nburn,сжечь\nhill,холм\nsafe,сейф\ncat,кошка\ncentury,век\nconsider,рассматривать\ntype,Тип\nlaw,закон\nbit,немного\ncoast,побережье\ncopy,копия\nphrase,фраза\nsilent,тихий\ntall,высокий\nsand,песок\nsoil,почвы\nroll,рулон\ntemperature,температура\nfinger,палец\nindustry,промышленность\nvalue,значение\nfight,борьба\nlie,ложь\nbeat,бить\nexcite,возбуждать\nnatural,естественный\nview,вид\nsense,смысл\ncapital,капитал\nwon’t,не будет\nchair,стул\ndanger,опасность\nfruit,фрукты\nrich,богатые\nthick,толщиной\nsoldier,солдат\nprocess,процесс\noperate,работать\npractice,практика\nseparate,отдельный\ndifficult,трудный\ndoctor,врач\nplease,пожалуйста\nprotect,защищать\nnoon,полдень\ncrop,урожай\nmodern,современный\nelement,элемент\nhit,хит\nstudent,студент\ncorner,угол\nparty,партия\nsupply,поставка\nwhose,чьи\nlocate,разместить\nring,кольцо\ncharacter,характер\ninsect,насекомое\ncaught,пойманный\nperiod,период\nindicate,указывать\nradio,радио\nspoke,говорил\natom,атом\nhuman,человек\nhistory,история\neffect,эффект\nelectric,электрический\nexpect,ожидать\nbone,кость\nrail,железнодорожные\nimagine,вообразить\nprovide,обеспечить\nagree,соглашаться\nthus,таким образом\ngentle,нежный\nwoman,женщина\ncaptain,капитан\nguess,догадываться\nnecessary,необходимо\nsharp,резкое\nwing,крыло\ncreate,создавать\nneighbor,сосед\nwash,стирка\nbat,летучая мышь\nrather,а\ncrowd,толпа\ncorn,кукуруза\ncompare,сравнить\npoem,стихотворение\nstring,строка\nbell,колокол\ndepend,зависеть\nmeat,мясо\nrub,руб\ntube,трубка\nfamous,известный\ndollar,доллар\nstream,поток\nfear,страх\nsight,зрение\nthin,тонкий\ntriangle,треугольник\nplanet,планета\nhurry,спешить\nchief,главный\ncolony,колония\nclock,часы\nmine,шахта\ntie,связать\nenter,введите\nmajor,основным\nfresh,свежий\nsearch,поиск\nsend,отправить\nyellow,желтый\ngun,пистолет\nallow,позволять\nprint,печать\ndead,мертвый\nspot,место\ndesert,пустыня\nsuit,костюм\ncurrent,ток\nlift,лифт\nrose,выросла\narrive,приходим\nmaster,мастер\ntrack,трек\nparent,родитель\nshore,берег\ndivision,деление\nsheet,лист\nsubstance,вещество\nfavor,пользу\nconnect,подключать\npost,пост\nspend,провести\nchord,аккорд\nfat,жира\nglad,довольный\noriginal,оригинальный\nshare,доля\nstation,станция\ndad,папа\nbread,хлеб\ncharge,взимать\nproper,собственно\nbar,бар\noffer,предложение\nsegment,сегмент\nslave,раб\nduck,утка\ninstant,растворимый\nmarket,рынок\ndegree,степень\npopulate,заселять\nchick,цыпленок\ndear,дорогой\nenemy,враг\nreply,ответ\ndrink,напиток\noccur,происходить\nsupport,поддержка\nspeech,речь\nnature,природа\nrange,диапазон\nsteam,пара\nmotion,движение\npath,путь\nliquid,жидкости\nlog,войти\nmeant,означало\nquotient,фактор\nteeth,зубы\nshell,оболочка\nneck,шея\noxygen,кислорода\nsugar,сахар\ndeath,смерть\npretty,довольно\nskill,умение\nwomen,женщины\nseason,сезон\nsolution,решение\nmagnet,магнит\nsilver,серебро\nthank,спасибо\nbranch,филиал\nmatch,матч\nsuffix,суффикс\nespecially,особенно\nfig,рис\nafraid,боится\nhuge,огромный\nsister,сестра\nsteel,сталь\ndiscuss,обсуждать\nforward,вперед\nsimilar,похожи\nguide,направлять\nexperience,опыт\nscore,счет\napple,яблоко\nbought,купленный\nled,привело\npitch,шаг\ncoat,пальто\nmass,масса\ncard,карта\nband,полоса\nrope,веревка\nslip,скольжение\nwin,выиграть\ndream,мечтать\nevening,вечер\ncondition,состояние\nfeed,корма\ntool,инструмент\ntotal,общий\nbasic,основной\nsmell,запах\nvalley,долина\nnor,ни\ndouble,двойной\nseat,сиденья\ncontinue,продолжать\nblock,блок\nchart,диаграмма\nhat,шляпа\nsell,продать\nsuccess,успех\ncompany,компания\nsubtract,вычитать\nevent,мероприятие\nparticular,частности\ndeal,сделка\nswim,плавать\nterm,термин\nopposite,напротив\nwife,жена\nshoe,обуви\nshoulder,плечо\nspread,распространение\narrange,организовать\ncamp,лагерь\ninvent,изобретать\ncotton,хлопок\nborn,родившийся\ndetermine,определять\nquart,кварта\nnine,девять\ntruck,грузовик\nnoise,шум\nlevel,уровень\nchance,шанс\ngather,собирать\nshop,магазин\nstretch,протяжение\nthrow,бросать\nshine,блеск\nproperty,имущество\ncolumn,колонка\nmolecule,молекула\nselect,выбирать\nwrong,неправильно\ngray,серый\nrepeat,повторение\nrequire,требовать\nbroad,широкий\nprepare,подготовить\nsalt,соль\nnose,нос\nplural,множественное\nanger,гнев\nclaim,претензии\ncontinent,континент\n/* Add additional words here */"
            },
            "src/com/kovko/dictionary/EngRuHashMapDictionary.java" : {
              "name" : "src/com/kovko/dictionary/EngRuHashMapDictionary.java",
              "placeholders" : [
                {
                  "offset" : 405,
                  "length" : 11,
                  "dependency" : {
                    "lesson" : "Translator App",
                    "task" : "Part 6",
                    "file" : "src/com/kovko/dictionary/EngRuHashMapDictionary.java",
                    "placeholder" : 0,
                    "is_visible" : false
                  },
                  "possible_answer" : "стол",
                  "placeholder_text" : "translation"
                },
                {
                  "offset" : 446,
                  "length" : 4,
                  "dependency" : {
                    "lesson" : "Translator App",
                    "task" : "Part 6",
                    "file" : "src/com/kovko/dictionary/EngRuHashMapDictionary.java",
                    "placeholder" : 1,
                    "is_visible" : false
                  },
                  "possible_answer" : "money",
                  "placeholder_text" : "word"
                },
                {
                  "offset" : 502,
                  "length" : 11,
                  "dependency" : {
                    "lesson" : "Translator App",
                    "task" : "Part 6",
                    "file" : "src/com/kovko/dictionary/EngRuHashMapDictionary.java",
                    "placeholder" : 2,
                    "is_visible" : false
                  },
                  "possible_answer" : "компьютер",
                  "placeholder_text" : "translation"
                },
                {
                  "offset" : 543,
                  "length" : 4,
                  "dependency" : {
                    "lesson" : "Translator App",
                    "task" : "Part 6",
                    "file" : "src/com/kovko/dictionary/EngRuHashMapDictionary.java",
                    "placeholder" : 3,
                    "is_visible" : false
                  },
                  "possible_answer" : "road",
                  "placeholder_text" : "word"
                }
              ],
              "is_visible" : true,
              "text" : "package com.kovko.dictionary;\n\nimport java.util.HashMap;\nimport java.util.Locale;\n\npublic class EngRuHashMapDictionary implements Dictionary {\n\n    private final HashMap<String, String> translations;\n\n    public EngRuHashMapDictionary() {\n        translations = new HashMap<>();\n        translations.put(\"car\", \"автомобиль\");\n        translations.put(\"window\", \"окно\");\n        translations.put(\"table\", \"translation\");\n        translations.put(\"word\", \"деньги\");\n        translations.put(\"computer\", \"translation\");\n        translations.put(\"word\", \"дорога\");\n    }\n\n    @Override\n    public String lookUp(String text) {\n        return translations.get(text.toLowerCase(Locale.US).trim());\n    }\n}\n"
            },
            "src/com/kovko/dictionary/EngRuCsvFileDictionary.java" : {
              "name" : "src/com/kovko/dictionary/EngRuCsvFileDictionary.java",
              "placeholders" : [
                {
                  "offset" : 438,
                  "length" : 15,
                  "dependency" : {
                    "lesson" : "Translator App",
                    "task" : "Part 6",
                    "file" : "src/com/kovko/dictionary/EngRuCsvFileDictionary.java",
                    "placeholder" : 0,
                    "is_visible" : false
                  },
                  "possible_answer" : "String fileName, String charsetName, String sourceLanguage, String targetLanguage",
                  "placeholder_text" : "String fileName"
                },
                {
                  "offset" : 499,
                  "length" : 7,
                  "dependency" : {
                    "lesson" : "Translator App",
                    "task" : "Part 6",
                    "file" : "src/com/kovko/dictionary/EngRuCsvFileDictionary.java",
                    "placeholder" : 1,
                    "is_visible" : false
                  },
                  "possible_answer" : "charsetName",
                  "placeholder_text" : "\"UTF-8\""
                },
                {
                  "offset" : 550,
                  "length" : 4,
                  "dependency" : {
                    "lesson" : "Translator App",
                    "task" : "Part 6",
                    "file" : "src/com/kovko/dictionary/EngRuCsvFileDictionary.java",
                    "placeholder" : 2,
                    "is_visible" : false
                  },
                  "possible_answer" : "sourceLanguage",
                  "placeholder_text" : "\"us\""
                },
                {
                  "offset" : 598,
                  "length" : 4,
                  "dependency" : {
                    "lesson" : "Translator App",
                    "task" : "Part 6",
                    "file" : "src/com/kovko/dictionary/EngRuCsvFileDictionary.java",
                    "placeholder" : 3,
                    "is_visible" : false
                  },
                  "possible_answer" : "targetLanguage",
                  "placeholder_text" : "\"ru\""
                }
              ],
              "is_visible" : true,
              "text" : "package com.kovko.dictionary;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.nio.charset.Charset;\nimport java.util.HashMap;\nimport java.util.Locale;\n\npublic class EngRuCsvFileDictionary implements Dictionary {\n\n    private static final String DELIMITER = \",\";\n    private final HashMap<String, String> translations;\n\n    public EngRuCsvFileDictionary(String fileName) {\n        Charset charset = Charset.forName(\"UTF-8\");\n        Locale sourceLocale = new Locale(\"us\");\n        Locale targetLocale = new Locale(\"ru\");\n        translations = new HashMap<>();\n\n        try (InputStream stream = getClass().getClassLoader().getResourceAsStream(fileName);\n             InputStreamReader inputStreamReader = new InputStreamReader(stream, charset);\n             BufferedReader reader = new BufferedReader(inputStreamReader)) {\n            for (String line = reader.readLine(); line != null; line = reader.readLine()) {\n                String[] words = line.split(DELIMITER);\n                if (words.length == 2) {\n                    String word = words[0].toLowerCase(sourceLocale).strip();\n                    String translation = words[1].toLowerCase(targetLocale).strip();\n                    translations.put(word, translation);\n                }\n            }\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    @Override\n    public String lookUp(String text) {\n        return translations.get(text.toLowerCase(Locale.US).trim());\n    }\n}\n"
            },
            "src/com/kovko/dictionary/DictProtocolDictionary.java" : {
              "name" : "src/com/kovko/dictionary/DictProtocolDictionary.java",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "package com.kovko.dictionary;\n\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.OutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.Writer;\nimport java.net.Socket;\nimport java.nio.charset.Charset;\nimport java.nio.charset.StandardCharsets;\n\npublic class DictProtocolDictionary implements Dictionary {\n\n    private static final int PORT = 2628;\n    private static final int TIMEOUT = 15000;\n    private static final String DEFINITION_FORMAT = \"DEFINE %s %s\\r\\n\";\n    private final String host;\n    private final String dictionary;\n\n    public DictProtocolDictionary(String host, String dictionary) {\n        this.host = host;\n        this.dictionary = dictionary;\n    }\n\n    @Override\n    public String lookUp(String text) {\n        String definition;\n        try (Socket socket = new Socket(host, PORT)){\n            socket.setSoTimeout(TIMEOUT);\n            Writer writer = getWriter(socket, StandardCharsets.UTF_8);\n            BufferedReader reader = getReader(socket, StandardCharsets.UTF_8);\n            definition = define(text, writer, reader);\n            quit(writer);\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n        return definition;\n    }\n\n    private String define(String word, Writer writer, BufferedReader reader) throws IOException {\n        StringBuilder stringBuilder = new StringBuilder();\n        writer.write(String.format(DEFINITION_FORMAT, dictionary, word));\n        writer.flush();\n        for (String line = reader.readLine(); line != null; line = reader.readLine()) {\n            // If there no definition for this word, we don't provide anything\n            if (line.startsWith(\"552 \")) { // no match\n                System.out.println(\"No definition found for: \" + word);\n                break;\n                // All the status lines should be ignored\n            } else if (line.matches(\"(\\\\d){3}.*\")){\n                continue;\n                // The line which contains only . shows that this is the end of the data\n            } else if (line.trim().equals(\".\")) {\n                break;\n                // We append all the translation to the initial StringBuilder\n            } else {\n                stringBuilder.append(line);\n            }\n        }\n        return stringBuilder.toString();\n    }\n\n    private void quit(Writer writer) throws IOException {\n        writer.write(\"quit\\r\\n\");\n        writer.flush();\n    }\n\n    private BufferedReader getReader(Socket socket, Charset charset) throws IOException {\n        InputStream inputStream = socket.getInputStream();\n        InputStreamReader inputStreamReader = new InputStreamReader(inputStream, charset);\n        return new BufferedReader(inputStreamReader);\n    }\n\n    private Writer getWriter(Socket socket, Charset charset) throws IOException {\n        OutputStream outputStream = socket.getOutputStream();\n        Writer writer = new OutputStreamWriter(outputStream, charset);\n        return new BufferedWriter(writer);\n    }\n}\n"
            },
            "test/Tests.java" : {
              "name" : "test/Tests.java",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import org.junit.jupiter.api.Test;\nimport com.kovko.translator.Translator;\nimport static org.assertj.core.api.Assertions.assertThat;\n\nclass Tests {\n    @Test\n    void testConstructor() {\n      for (java.lang.reflect.Constructor<?> declaredConstructor : Translator.class.getDeclaredConstructors()) {\n        int parameterCount = declaredConstructor.getParameterCount();\n        assertThat(parameterCount)\n            .as(\"There should only one parameter in the Translator.\\n\" +\n                \"The instance of Dictionary should be passed to the constructor.\\n\")\n            .isEqualTo(1);\n      }\n  }\n}"
            }
          },
          "description_text" : "<html>\n<p>This is a task description file.\nIts content will be displayed to a learner\nin the <strong>Task Description</strong> window.</p>\n\n<p>It supports both Markdown and HTML.\nTo toggle the format, you can rename <strong>task.md</strong>\nto <strong>task.html</strong>, or vice versa.\nThe default task description format can be changed\nin <strong>Preferences | Tools | Education</strong>,\nbut this will not affect any existing task description files.</p>\n\n<p>The following features are available in\n<strong>task.md/task.html</strong>\nwhich are specific to the EduTools plugin:</p>\n\n<ul>\n<li>Hints can be added anywhere in the task text.\nType \"hint\" and press Tab.\nHints should be added to an empty line in the task text.\nIn hints you can use HTML only.\n<div class=\"hint\">Text of your hint</div></li>\n\n<li>You can insert shortcuts in the task description.\nWhile <strong>task.html/task.md</strong> is open,\nright-click anywhere on the <strong>Editor</strong> tab\nand choose the <strong>Insert shortcut</strong> option\nfrom the context menu.\nFor example: &amp;shortcut:FileStructurePopup;.</li><br>\n\n<li>Insert the &percnt;<code>IDE_NAME</code>&percnt; macro,\nwhich will be replaced by the actual IDE name.\nFor example, <strong>%IDE_NAME%</strong>.</li><br>\n\n<li>Insert PSI elements, by using links like\n<code>&lt;a href=\"psi_element://link.to.element\"&gt;element description&lt;/a&gt;</code>.\nTo get such a link, right-click the class or method\nand select <strong>Copy Reference</strong>.\nThen press &amp;shortcut:EditorPaste;\nto insert the link where appropriate.\nFor example, a\n<a href=\"psi_element://java.lang.String#contains\">link to the \"contains\" method</a>.</li>\n</ul>\n</html>",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        }
      ],
      "type" : "framework"
    },
    {
      "title" : "IoC patterns",
      "task_list" : [
        {
          "name" : "Template method",
          "files" : {
            "test/Tests.java" : {
              "name" : "test/Tests.java",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import org.junit.Assert;\nimport org.junit.Test;\n\npublic class Tests {\n  @Test\n  public void testSolution() {\n    // put your test here\n    Assert.fail(\"Tests not implemented for the task\");\n  }\n}"
            },
            "src/com/kovko/construction/ConstructionTeam.java" : {
              "name" : "src/com/kovko/construction/ConstructionTeam.java",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "package com.kovko.construction;\n\npublic abstract class ConstructionTeam {\n\n\tpublic final void constructBuilding() {\n\t\tbuildWalls();\n\t\tbuildRoof();\n\t\tbuildDoors();\n\t\tbuildWindows();\n\t}\n\n\tabstract void buildWalls();\n\tabstract void buildRoof();\n\tabstract void buildDoors();\n\tabstract void buildWindows();\n\n}\n"
            },
            "src/com/kovko/construction/UnprofessionalConstructionTeam.java" : {
              "name" : "src/com/kovko/construction/UnprofessionalConstructionTeam.java",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "package com.kovko.construction;\n\npublic class UnprofessionalConstructionTeam extends ConstructionTeam {\n\n\t@Override\n\tvoid buildWalls() {\n\t\tSystem.out.println(\"Walls are there, but they are shaky\");\n\t}\n\n\t@Override\n\tvoid buildRoof() {\n\t\tSystem.out.println(\"Roof is leaking\");\n\t}\n\n\t@Override\n\tvoid buildDoors() {\n\t\tSystem.out.println(\"Doors are squeaking\");\n\t}\n\n\t@Override\n\tvoid buildWindows() {\n\t\tthrow new UnsupportedOperationException();\n\t}\n}\n"
            },
            "src/com/kovko/construction/ProfessionalConstructionTeam.java" : {
              "name" : "src/com/kovko/construction/ProfessionalConstructionTeam.java",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "package com.kovko.construction;\n\npublic class ProfessionalConstructionTeam extends ConstructionTeam {\n\n\t@Override\n\tvoid buildWalls() {\n\t\tSystem.out.println(\"Walls are even and painted with quality\");\n\t}\n\n\t@Override\n\tvoid buildRoof() {\n\t\tthrow new UnsupportedOperationException();\n\t}\n\n\t@Override\n\tvoid buildDoors() {\n\t\tSystem.out.println(\"Doors are very safe and reliable\");\n\t}\n\n\t@Override\n\tvoid buildWindows() {\n\t\tSystem.out.println(\"Windows don't let any noise from outside\");\n\t}\n}\n"
            }
          },
          "description_text" : "<html>\n<p>This is a task description file.\nIts content will be displayed to a learner\nin the <strong>Task Description</strong> window.</p>\n\n<p>It supports both Markdown and HTML.\nTo toggle the format, you can rename <strong>task.md</strong>\nto <strong>task.html</strong>, or vice versa.\nThe default task description format can be changed\nin <strong>Preferences | Tools | Education</strong>,\nbut this will not affect any existing task description files.</p>\n\n<p>The following features are available in\n<strong>task.md/task.html</strong>\nwhich are specific to the EduTools plugin:</p>\n\n<ul>\n<li>Hints can be added anywhere in the task text.\nType \"hint\" and press Tab.\nHints should be added to an empty line in the task text.\nIn hints you can use HTML only.\n<div class=\"hint\">Text of your hint</div></li>\n\n<li>You can insert shortcuts in the task description.\nWhile <strong>task.html/task.md</strong> is open,\nright-click anywhere on the <strong>Editor</strong> tab\nand choose the <strong>Insert shortcut</strong> option\nfrom the context menu.\nFor example: &amp;shortcut:FileStructurePopup;.</li><br>\n\n<li>Insert the &percnt;<code>IDE_NAME</code>&percnt; macro,\nwhich will be replaced by the actual IDE name.\nFor example, <strong>%IDE_NAME%</strong>.</li><br>\n\n<li>Insert PSI elements, by using links like\n<code>&lt;a href=\"psi_element://link.to.element\"&gt;element description&lt;/a&gt;</code>.\nTo get such a link, right-click the class or method\nand select <strong>Copy Reference</strong>.\nThen press &amp;shortcut:EditorPaste;\nto insert the link where appropriate.\nFor example, a\n<a href=\"psi_element://java.lang.String#contains\">link to the \"contains\" method</a>.</li>\n</ul>\n</html>",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Constructor injection",
          "files" : {
            "test/Tests.java" : {
              "name" : "test/Tests.java",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import com.kovko.engine.BasicEngine;\nimport com.kovko.engine.Engine;\nimport org.junit.jupiter.api.Test;\n\nimport java.lang.reflect.Constructor;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nclass Tests {\n\n  @Test\n  void testEngineCreation() {\n    Constructor<?>[] constructors = BasicEngine.class.getDeclaredConstructors();\n    assertThat(constructors.length)\n        .as(\"There should be only one constructor\").isEqualTo(1);\n    assertThat(constructors[0].getParameterCount())\n        .as(\"There should be only one parameter in the constructor\").isEqualTo(1);\n    assertThat(constructors[0].getParameterTypes()[0])\n        .as(\"Car constructor should accept Engine instance\").isInstanceOf(Engine.class);\n\n  }\n}"
            },
            "src/com/kovko/vehicle/Car.java" : {
              "name" : "src/com/kovko/vehicle/Car.java",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "package com.kovko.vehicle;\n\nimport com.kovko.engine.Engine;\n\npublic class Car {\n\n\tprivate Engine engine;\n\n\tpublic Car() {\n\t}\n\n\tpublic void turnLeft() {\n\t\tSystem.out.println(\"Turning left\");\n\t}\n\n\tpublic void turnRight() {\n\t\tSystem.out.println(\"Turn right\");\n\t}\n\n\tpublic void drive() {\n\t\tengine.start();\n\t\tSystem.out.println(\"Enjoy the ride\");\n\t}\n\n\tpublic void stop() {\n\t\tengine.stop();\n\t\tSystem.out.println(\"Enjoy the view\");\n\t}\n\n}\n"
            },
            "src/com/kovko/engine/BasicEngine.java" : {
              "name" : "src/com/kovko/engine/BasicEngine.java",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "package com.kovko.engine;\n\npublic class BasicEngine implements Engine {\n\n\tpublic BasicEngine(Object[] requiredSystems) {\n\t\t/*\n\t\t* Some complicated code with initialization and resolving dependencies.\n\t\t* There too many things to create and they probably can change over time.\n\t\t* Also this is only one implementation of the Engine interface,\n\t\t* and also can be changed in the future.\n\t\t* */\n\t}\n\n\t@Override\n\tpublic void start() {\n\t\tSystem.out.println(\"Engine is started\");\n\t}\n\n\t@Override\n\tpublic void stop() {\n\t\tSystem.out.println(\"Engine has been turned off\");\n\t}\n\n}\n"
            },
            "src/com/kovko/engine/Engine.java" : {
              "name" : "src/com/kovko/engine/Engine.java",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "package com.kovko.engine;\n\npublic interface Engine {\n\tvoid start();\n\tvoid stop();\n}\n"
            },
            "src/com/kovko/runner/Runner.java" : {
              "name" : "src/com/kovko/runner/Runner.java",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "package com.kovko.runner;\n\nimport com.kovko.vehicle.Car;\n\npublic class Runner {\n\tpublic static void main(String[] args) {\n\t\tCar car = new Car();\n\t\tcar.drive();\n\t\tcar.turnLeft();\n\t\tcar.turnRight();\n\t\tcar.stop();\n\t}\n}\n"
            }
          },
          "description_text" : "<html>\n<p>This is a task description file.\nIts content will be displayed to a learner\nin the <strong>Task Description</strong> window.</p>\n\n<p>It supports both Markdown and HTML.\nTo toggle the format, you can rename <strong>task.md</strong>\nto <strong>task.html</strong>, or vice versa.\nThe default task description format can be changed\nin <strong>Preferences | Tools | Education</strong>,\nbut this will not affect any existing task description files.</p>\n\n<p>The following features are available in\n<strong>task.md/task.html</strong>\nwhich are specific to the EduTools plugin:</p>\n\n<ul>\n<li>Hints can be added anywhere in the task text.\nType \"hint\" and press Tab.\nHints should be added to an empty line in the task text.\nIn hints you can use HTML only.\n<div class=\"hint\">Text of your hint</div></li>\n\n<li>You can insert shortcuts in the task description.\nWhile <strong>task.html/task.md</strong> is open,\nright-click anywhere on the <strong>Editor</strong> tab\nand choose the <strong>Insert shortcut</strong> option\nfrom the context menu.\nFor example: &amp;shortcut:FileStructurePopup;.</li><br>\n\n<li>Insert the &percnt;<code>IDE_NAME</code>&percnt; macro,\nwhich will be replaced by the actual IDE name.\nFor example, <strong>%IDE_NAME%</strong>.</li><br>\n\n<li>Insert PSI elements, by using links like\n<code>&lt;a href=\"psi_element://link.to.element\"&gt;element description&lt;/a&gt;</code>.\nTo get such a link, right-click the class or method\nand select <strong>Copy Reference</strong>.\nThen press &amp;shortcut:EditorPaste;\nto insert the link where appropriate.\nFor example, a\n<a href=\"psi_element://java.lang.String#contains\">link to the \"contains\" method</a>.</li>\n</ul>\n</html>",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Setter injection",
          "files" : {
            "test/Tests.java" : {
              "name" : "test/Tests.java",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import com.kovko.battery.Battery;\nimport com.kovko.remote.RecoderRemoteControl;\nimport org.junit.jupiter.api.Test;\n\nimport java.lang.reflect.Constructor;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n\nclass Tests {\n  @Test\n  void testSolution() {\n    Constructor<?>[] constructors = RecoderRemoteControl.class.getDeclaredConstructors();\n    assertThat(constructors.length)\n        .as(\"There should be only one constructor in RecoderRemoteControl\").isEqualTo(1);\n    assertThat(constructors[0].getParameterTypes().length)\n        .as(\"There should be one default  constructor in RecoderRemoteControl\").isEqualTo(0);\n      assertDoesNotThrow(() -> {\n        RecoderRemoteControl.class.getDeclaredMethod(\"setFirstBattery\", Battery.class);\n        RecoderRemoteControl.class.getDeclaredMethod(\"setSecondBattery\", Battery.class);\n      }, \"RecoderRemoteControl should contain setters for the batteries\");\n  }\n}"
            },
            "src/com/kovko/remote/RemoteControl.java" : {
              "name" : "src/com/kovko/remote/RemoteControl.java",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "package com.kovko.remote;\n\npublic interface RemoteControl {\n\tvoid play();\n\tvoid pause();\n\tvoid stop();\n\tvoid volumeUp();\n\tvoid volumeDown();\n}\n"
            },
            "src/com/kovko/remote/RecoderRemoteControl.java" : {
              "name" : "src/com/kovko/remote/RecoderRemoteControl.java",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "package com.kovko.remote;\n\nimport com.kovko.battery.Battery;\n\npublic class RecoderRemoteControl implements RemoteControl{\n\n\tprivate Battery firstBattery;\n\tprivate Battery secondBattery;\n\n\t@Override\n\tpublic void play() {\n\t\tcheckBatteries();\n\t\tSystem.out.println(\"Video is playing\");\n\t}\n\n\t@Override\n\tpublic void pause() {\n\t\tcheckBatteries();\n\t\tSystem.out.println(\"Video is on a pause\");\n\t}\n\n\t@Override\n\tpublic void stop() {\n\t\tcheckBatteries();\n\t\tSystem.out.println(\"Video has been stopped\");\n\t}\n\n\t@Override\n\tpublic void volumeUp() {\n\t\tcheckBatteries();\n\t\tSystem.out.println(\"Volume became louder\");\n\t}\n\n\t@Override\n\tpublic void volumeDown() {\n\t\tcheckBatteries();\n\t\tSystem.out.println(\"Volume became more quite\");\n\t}\n\n\tprivate void checkBatteries() {\n\t\tif (batteryIsCharged(firstBattery) && batteryIsCharged(secondBattery)) {\n\t\t\tthrow new IllegalStateException(\"Remote control has some problems with batteries\");\n\t\t}\n\t}\n\n\tprivate boolean batteryIsCharged(Battery battery) {\n\t\treturn battery != null && !this.secondBattery.hasCharge();\n\t}\n}\n"
            },
            "src/com/kovko/battery/Battery.java" : {
              "name" : "src/com/kovko/battery/Battery.java",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "package com.kovko.battery;\n\npublic interface Battery {\n\tboolean hasCharge();\n}\n"
            },
            "src/com/kovko/battery/SimpleBattery.java" : {
              "name" : "src/com/kovko/battery/SimpleBattery.java",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "package com.kovko.battery;\n\npublic class SimpleBattery implements Battery {\n\n\tprivate int charge;\n\n\tpublic SimpleBattery() {\n\t\tthis.charge = 10;\n\t}\n\n\t@Override\n\tpublic boolean hasCharge() {\n\t\treturn charge > 0;\n\t}\n}\n"
            },
            "src/com/kovko/runner/Runner.java" : {
              "name" : "src/com/kovko/runner/Runner.java",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "package com.kovko.runner;\n\npublic class Runner {\n\tpublic static void main(String[] args) {\n\n\t}\n}\n"
            }
          },
          "description_text" : "<html>\n<p>This is a task description file.\nIts content will be displayed to a learner\nin the <strong>Task Description</strong> window.</p>\n\n<p>It supports both Markdown and HTML.\nTo toggle the format, you can rename <strong>task.md</strong>\nto <strong>task.html</strong>, or vice versa.\nThe default task description format can be changed\nin <strong>Preferences | Tools | Education</strong>,\nbut this will not affect any existing task description files.</p>\n\n<p>The following features are available in\n<strong>task.md/task.html</strong>\nwhich are specific to the EduTools plugin:</p>\n\n<ul>\n<li>Hints can be added anywhere in the task text.\nType \"hint\" and press Tab.\nHints should be added to an empty line in the task text.\nIn hints you can use HTML only.\n<div class=\"hint\">Text of your hint</div></li>\n\n<li>You can insert shortcuts in the task description.\nWhile <strong>task.html/task.md</strong> is open,\nright-click anywhere on the <strong>Editor</strong> tab\nand choose the <strong>Insert shortcut</strong> option\nfrom the context menu.\nFor example: &amp;shortcut:FileStructurePopup;.</li><br>\n\n<li>Insert the &percnt;<code>IDE_NAME</code>&percnt; macro,\nwhich will be replaced by the actual IDE name.\nFor example, <strong>%IDE_NAME%</strong>.</li><br>\n\n<li>Insert PSI elements, by using links like\n<code>&lt;a href=\"psi_element://link.to.element\"&gt;element description&lt;/a&gt;</code>.\nTo get such a link, right-click the class or method\nand select <strong>Copy Reference</strong>.\nThen press &amp;shortcut:EditorPaste;\nto insert the link where appropriate.\nFor example, a\n<a href=\"psi_element://java.lang.String#contains\">link to the \"contains\" method</a>.</li>\n</ul>\n</html>",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Strategy",
          "files" : {
            "src/Task.java" : {
              "name" : "src/Task.java",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "public class Task {\n  //put your task here\n}"
            },
            "test/Tests.java" : {
              "name" : "test/Tests.java",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import org.junit.Assert;\nimport org.junit.Test;\n\npublic class Tests {\n  @Test\n  public void testSolution() {\n    // put your test here\n    Assert.fail(\"Tests not implemented for the task\");\n  }\n}"
            },
            "src/com/kovko/algorithm/TournamentAlgorithm.java" : {
              "name" : "src/com/kovko/algorithm/TournamentAlgorithm.java",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "package com.kovko.algorithm;\n\nimport com.kovko.team.Match;\nimport com.kovko.team.Team;\n\nimport java.util.List;\n\npublic interface TournamentAlgorithm {\n\tList<Match> scheduleMatches(List<Team> teams);\n}\n"
            },
            "src/com/kovko/algorithm/RandomTournamentAlgorithm.java" : {
              "name" : "src/com/kovko/algorithm/RandomTournamentAlgorithm.java",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "package com.kovko.algorithm;\n\nimport com.kovko.team.Match;\nimport com.kovko.team.Team;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class RandomTournamentAlgorithm implements TournamentAlgorithm {\n\t@Override\n\tpublic List<Match> scheduleMatches(List<Team> teams) {\n\t\tList<Match> matches = new ArrayList<>();\n\t\tif (teams.size() % 2 == 0) {\n\t\t\tCollections.shuffle(teams);\n\t\t\tfor (int i = 0; i < teams.size(); i+=2) {\n\t\t\t\tmatches.add(new Match(teams.get(i), teams.get(i + 1)));\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new IllegalArgumentException(\"The number of teams should be even\");\n\t\t}\n\t\treturn matches;\n\t}\n}\n"
            },
            "src/com/kovko/algorithm/EveryOneVsEveryOneTournamentAlgorithm.java" : {
              "name" : "src/com/kovko/algorithm/EveryOneVsEveryOneTournamentAlgorithm.java",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "package com.kovko.algorithm;\n\nimport com.kovko.team.Match;\nimport com.kovko.team.Team;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class EveryOneVsEveryOneTournamentAlgorithm implements TournamentAlgorithm {\n\t@Override\n\tpublic List<Match> scheduleMatches(List<Team> teams) {\n\t\tList<Match> matches = new ArrayList<>();\n\t\tfor (int i = 0; i < teams.size(); i++) {\n\t\t\tfor (int j = 0; j < teams.size(); j++) {\n\t\t\t\tif (i!=j) {\n\t\t\t\t\tmatches.add(new Match(teams.get(i), teams.get(j)));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn matches;\n\t}\n}\n"
            },
            "src/com/kovko/tournament/BasicTournament.java" : {
              "name" : "src/com/kovko/tournament/BasicTournament.java",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "package com.kovko.tournament;\n\n\nimport com.kovko.algorithm.TournamentAlgorithm;\nimport com.kovko.team.Match;\nimport com.kovko.team.Team;\n\nimport java.util.List;\n\npublic class BasicTournament implements Tournament {\n\n\tprivate List<Team> teams;\n\tprivate TournamentAlgorithm tournamentAlgorithm;\n\n\tpublic BasicTournament(List<Team> teams) {\n\t\tthis.teams = teams;\n\t}\n\n\t@Override\n\tpublic List<Match> scheduleMatches() {\n\t\treturn tournamentAlgorithm.scheduleMatches(teams);\n\t}\n\n\tpublic void setTournamentAlgorithm(TournamentAlgorithm tournamentAlgorithm) {\n\t\tthis.tournamentAlgorithm = tournamentAlgorithm;\n\t}\n}\n"
            },
            "src/com/kovko/tournament/Tournament.java" : {
              "name" : "src/com/kovko/tournament/Tournament.java",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "package com.kovko.tournament;\n\nimport com.kovko.team.Match;\n\nimport java.util.List;\n\npublic interface Tournament {\n\tList<Match> scheduleMatches();\n}\n"
            },
            "src/com/kovko/team/Match.java" : {
              "name" : "src/com/kovko/team/Match.java",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "package com.kovko.team;\n\npublic class Match {\n\n\tprivate final Team hostTeam;\n\tprivate final Team guestTeam;\n\n\tpublic Match(Team hostTeam, Team guestTeam) {\n\t\tthis.hostTeam = hostTeam;\n\t\tthis.guestTeam = guestTeam;\n\t}\n\n\tpublic Team getHostTeam() {\n\t\treturn hostTeam;\n\t}\n\n\tpublic Team getGuestTeam() {\n\t\treturn guestTeam;\n\t}\n}\n"
            },
            "src/com/kovko/team/Team.java" : {
              "name" : "src/com/kovko/team/Team.java",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "package com.kovko.team;\n\npublic class Team {\n\n\tprivate final String name;\n\n\tpublic Team(String name) {\n\t\tthis.name = name;\n\t}\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n}\n"
            }
          },
          "description_text" : "<html>\n<p>This is a task description file.\nIts content will be displayed to a learner\nin the <strong>Task Description</strong> window.</p>\n\n<p>It supports both Markdown and HTML.\nTo toggle the format, you can rename <strong>task.md</strong>\nto <strong>task.html</strong>, or vice versa.\nThe default task description format can be changed\nin <strong>Preferences | Tools | Education</strong>,\nbut this will not affect any existing task description files.</p>\n\n<p>The following features are available in\n<strong>task.md/task.html</strong>\nwhich are specific to the EduTools plugin:</p>\n\n<ul>\n<li>Hints can be added anywhere in the task text.\nType \"hint\" and press Tab.\nHints should be added to an empty line in the task text.\nIn hints you can use HTML only.\n<div class=\"hint\">Text of your hint</div></li>\n\n<li>You can insert shortcuts in the task description.\nWhile <strong>task.html/task.md</strong> is open,\nright-click anywhere on the <strong>Editor</strong> tab\nand choose the <strong>Insert shortcut</strong> option\nfrom the context menu.\nFor example: &amp;shortcut:FileStructurePopup;.</li><br>\n\n<li>Insert the &percnt;<code>IDE_NAME</code>&percnt; macro,\nwhich will be replaced by the actual IDE name.\nFor example, <strong>%IDE_NAME%</strong>.</li><br>\n\n<li>Insert PSI elements, by using links like\n<code>&lt;a href=\"psi_element://link.to.element\"&gt;element description&lt;/a&gt;</code>.\nTo get such a link, right-click the class or method\nand select <strong>Copy Reference</strong>.\nThen press &amp;shortcut:EditorPaste;\nto insert the link where appropriate.\nFor example, a\n<a href=\"psi_element://java.lang.String#contains\">link to the \"contains\" method</a>.</li>\n</ul>\n</html>",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Service Locator",
          "files" : {
            "src/Task.java" : {
              "name" : "src/Task.java",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "public class Task {\n  //put your task here\n}"
            },
            "test/Tests.java" : {
              "name" : "test/Tests.java",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import org.junit.Assert;\nimport org.junit.Test;\n\npublic class Tests {\n  @Test\n  public void testSolution() {\n    // put your test here\n    Assert.fail(\"Tests not implemented for the task\");\n  }\n}"
            }
          },
          "description_text" : "<html>\n<p>This is a task description file.\nIts content will be displayed to a learner\nin the <strong>Task Description</strong> window.</p>\n\n<p>It supports both Markdown and HTML.\nTo toggle the format, you can rename <strong>task.md</strong>\nto <strong>task.html</strong>, or vice versa.\nThe default task description format can be changed\nin <strong>Preferences | Tools | Education</strong>,\nbut this will not affect any existing task description files.</p>\n\n<p>The following features are available in\n<strong>task.md/task.html</strong>\nwhich are specific to the EduTools plugin:</p>\n\n<ul>\n<li>Hints can be added anywhere in the task text.\nType \"hint\" and press Tab.\nHints should be added to an empty line in the task text.\nIn hints you can use HTML only.\n<div class=\"hint\">Text of your hint</div></li>\n\n<li>You can insert shortcuts in the task description.\nWhile <strong>task.html/task.md</strong> is open,\nright-click anywhere on the <strong>Editor</strong> tab\nand choose the <strong>Insert shortcut</strong> option\nfrom the context menu.\nFor example: &amp;shortcut:FileStructurePopup;.</li><br>\n\n<li>Insert the &percnt;<code>IDE_NAME</code>&percnt; macro,\nwhich will be replaced by the actual IDE name.\nFor example, <strong>%IDE_NAME%</strong>.</li><br>\n\n<li>Insert PSI elements, by using links like\n<code>&lt;a href=\"psi_element://link.to.element\"&gt;element description&lt;/a&gt;</code>.\nTo get such a link, right-click the class or method\nand select <strong>Copy Reference</strong>.\nThen press &amp;shortcut:EditorPaste;\nto insert the link where appropriate.\nFor example, a\n<a href=\"psi_element://java.lang.String#contains\">link to the \"contains\" method</a>.</li>\n</ul>\n</html>",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        }
      ],
      "type" : "lesson"
    },
    {
      "title" : "IoC container",
      "task_list" : [
        {
          "name" : "Google Giuce",
          "files" : {
            "src/com/kovko/runner/Main.java" : {
              "name" : "src/com/kovko/runner/Main.java",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "package com.kovko.runner;\n\nimport com.google.inject.Guice;\nimport com.google.inject.Injector;\nimport com.kovko.module.BasicModule;\nimport com.kovko.translator.Translator;\n\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        Injector injector = Guice.createInjector(new BasicModule());\n        Translator translator = injector.getInstance(Translator.class);\n        List<String> words = List.of(\"gold\", \"nose\");\n        for (String word : words) {\n            String translation = translator.translate(word);\n            System.out.println(translation);\n        }\n    }\n}\n\n"
            },
            "src/com/kovko/dictionary/Dictionary.java" : {
              "name" : "src/com/kovko/dictionary/Dictionary.java",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "package com.kovko.dictionary;\n\npublic interface Dictionary {\n    String lookUp(String text);\n}\n"
            },
            "src/com/kovko/dictionary/CsvFileDictionary.java" : {
              "name" : "src/com/kovko/dictionary/CsvFileDictionary.java",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "package com.kovko.dictionary;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.nio.charset.Charset;\nimport java.util.HashMap;\nimport java.util.Locale;\n\npublic class CsvFileDictionary implements Dictionary {\n\n    private static final String DELIMITER = \",\";\n    private final HashMap<String, String> translations;\n\n    public CsvFileDictionary(String fileName, Charset charset, Locale sourceLangLocale, Locale targetLangLocale) {\n        translations = new HashMap<>();\n\n        try (InputStream stream = getClass().getClassLoader().getResourceAsStream(fileName);\n             InputStreamReader inputStreamReader = new InputStreamReader(stream, charset);\n             BufferedReader reader = new BufferedReader(inputStreamReader)) {\n            for (String line = reader.readLine(); line != null; line = reader.readLine()) {\n                String[] words = line.split(DELIMITER);\n                if (words.length == 2) {\n                    String word = words[0].toLowerCase(sourceLangLocale).strip();\n                    String translation = words[1].toLowerCase(targetLangLocale).strip();\n                    translations.put(word, translation);\n                }\n            }\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    @Override\n    public String lookUp(String text) {\n        return translations.get(text.toLowerCase(Locale.US).trim());\n    }\n}\n"
            },
            "src/com/kovko/dictionary/HashMapDictionary.java" : {
              "name" : "src/com/kovko/dictionary/HashMapDictionary.java",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "package com.kovko.dictionary;\n\nimport java.util.HashMap;\nimport java.util.Locale;\n\npublic class HashMapDictionary implements Dictionary {\n\n    private final HashMap<String, String> translations;\n\n    public HashMapDictionary() {\n        translations = new HashMap<>();\n        translations.put(\"car\", \"автомобиль\");\n        translations.put(\"cat\", \"кот\");\n    }\n\n    @Override\n    public String lookUp(String text) {\n        return translations.get(text.toLowerCase(Locale.US).trim());\n    }\n}\n"
            },
            "src/com/kovko/dictionary/DictProtocolDictionary.java" : {
              "name" : "src/com/kovko/dictionary/DictProtocolDictionary.java",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "package com.kovko.dictionary;\n\nimport java.io.*;\nimport java.net.Socket;\nimport java.nio.charset.Charset;\nimport java.nio.charset.StandardCharsets;\n\npublic class DictProtocolDictionary implements Dictionary {\n\n    private static final int PORT = 2628;\n    private static final int TIMEOUT = 15000;\n    private static final String DEFINITION_FORMAT = \"DEFINE %s %s\\r\\n\";\n    private final String host;\n\n    public DictProtocolDictionary(String host) {\n        this.host = host;\n    }\n\n    @Override\n    public String lookUp(String text) {\n        String definition;\n        try (Socket socket = new Socket(host, PORT)){\n            socket.setSoTimeout(TIMEOUT);\n            Writer writer = getWriter(socket, StandardCharsets.UTF_8);\n            BufferedReader reader = getReader(socket, StandardCharsets.UTF_8);\n            definition = define(text, \"fd-eng-rus\", writer, reader);\n            quit(writer);\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n        return definition;\n    }\n\n    static String define(String word, String dictionary, Writer writer, BufferedReader reader) throws IOException {\n        StringBuilder stringBuilder = new StringBuilder();\n        writer.write(String.format(DEFINITION_FORMAT, dictionary, word));\n        writer.flush();\n        for (String line = reader.readLine(); line != null; line = reader.readLine()) {\n            // If there no definition for this word, we don't provide anything\n            if (line.startsWith(\"552 \")) { // no match\n                System.out.println(\"No definition found for: \" + word);\n                break;\n                // All the status lines should be ignored\n            } else if (line.matches(\"(\\\\d){3}.*\")){\n                continue;\n                // The line which contains only . shows that this is the end of the data\n            } else if (line.trim().equals(\".\")) {\n                break;\n                // We append all the translation to the initial StringBuilder\n            } else {\n                stringBuilder.append(line);\n            }\n        }\n        return stringBuilder.toString();\n    }\n\n    private void quit(Writer writer) throws IOException {\n        writer.write(\"quit\\r\\n\");\n        writer.flush();\n    }\n\n    private BufferedReader getReader(Socket socket, Charset charset) throws IOException {\n        InputStream inputStream = socket.getInputStream();\n        InputStreamReader inputStreamReader = new InputStreamReader(inputStream, charset);\n        return new BufferedReader(inputStreamReader);\n    }\n\n    private Writer getWriter(Socket socket, Charset charset) throws IOException {\n        OutputStream outputStream = socket.getOutputStream();\n        Writer writer = new OutputStreamWriter(outputStream, charset);\n        return new BufferedWriter(writer);\n    }\n}\n"
            },
            "src/com/kovko/translator/BasicTranslator.java" : {
              "name" : "src/com/kovko/translator/BasicTranslator.java",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "package com.kovko.translator;\n\nimport com.google.inject.Inject;\nimport com.kovko.dictionary.Dictionary;\n\n\npublic class BasicTranslator implements Translator {\n\n    private final Dictionary dictionary;\n\n    @Inject\n    public BasicTranslator(Dictionary dictionary) {\n        this.dictionary = dictionary;\n    }\n\n    @Override\n    public String translate(String text) {\n        return dictionary.lookUp(text);\n    }\n}\n"
            },
            "src/com/kovko/translator/Translator.java" : {
              "name" : "src/com/kovko/translator/Translator.java",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "package com.kovko.translator;\n\npublic interface Translator {\n    String translate(String text);\n}\n"
            },
            "src/com/kovko/module/BasicModule.java" : {
              "name" : "src/com/kovko/module/BasicModule.java",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "package com.kovko.module;\n\nimport com.google.inject.AbstractModule;\nimport com.kovko.dictionary.DictProtocolDictionary;\nimport com.kovko.dictionary.Dictionary;\nimport com.kovko.translator.BasicTranslator;\nimport com.kovko.translator.Translator;\n\npublic class BasicModule extends AbstractModule {\n\n    @Override\n    protected void configure() {\n        bind(Translator.class).to(BasicTranslator.class);\n        bind(Dictionary.class).toInstance(new DictProtocolDictionary(\"dict.org\"));\n    }\n}\n"
            },
            "src/com/kovko/injector/Injector.java" : {
              "name" : "src/com/kovko/injector/Injector.java",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "package com.kovko.injector;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Injector {\n\n\tprivate Map<Class<?>, Object> context = new HashMap<>();\n\n\tpublic Injector() {\n\t\tregisterService();\n\t}\n\n\tpublic <T> void registerService(Class<T> type, T service){\n\t\tcontext.put(type, service);\n\t}\n}\n"
            }
          },
          "description_text" : "",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "theory"
        },
        {
          "name" : "Spring container (bean configuration)",
          "files" : {
            "src/com/kovko/runner/Main.java" : {
              "name" : "src/com/kovko/runner/Main.java",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "package com.kovko.runner;\n\nimport com.kovko.configuration.ApplicationConfiguration;\nimport com.kovko.translator.Translator;\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\n\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(ApplicationConfiguration.class);\n        Translator translator = context.getBean(Translator.class);\n        List<String> words = List.of(\"gold\", \"nose\");\n        for (String word : words) {\n            String translation = translator.translate(word);\n            System.out.println(translation);\n        }\n    }\n}\n\n"
            },
            "src/com/kovko/dictionary/Dictionary.java" : {
              "name" : "src/com/kovko/dictionary/Dictionary.java",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "package com.kovko.dictionary;\n\npublic interface Dictionary {\n    String lookUp(String text);\n}\n"
            },
            "src/com/kovko/dictionary/CsvFileDictionary.java" : {
              "name" : "src/com/kovko/dictionary/CsvFileDictionary.java",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "package com.kovko.dictionary;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.nio.charset.Charset;\nimport java.util.HashMap;\nimport java.util.Locale;\n\npublic class CsvFileDictionary implements Dictionary {\n\n    private static final String DELIMITER = \",\";\n    private final HashMap<String, String> translations;\n\n    public CsvFileDictionary(String fileName, Charset charset, Locale sourceLangLocale, Locale targetLangLocale) {\n        translations = new HashMap<>();\n\n        try (InputStream stream = getClass().getClassLoader().getResourceAsStream(fileName);\n             InputStreamReader inputStreamReader = new InputStreamReader(stream, charset);\n             BufferedReader reader = new BufferedReader(inputStreamReader)) {\n            for (String line = reader.readLine(); line != null; line = reader.readLine()) {\n                String[] words = line.split(DELIMITER);\n                if (words.length == 2) {\n                    String word = words[0].toLowerCase(sourceLangLocale).strip();\n                    String translation = words[1].toLowerCase(targetLangLocale).strip();\n                    translations.put(word, translation);\n                }\n            }\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    @Override\n    public String lookUp(String text) {\n        return translations.get(text.toLowerCase(Locale.US).trim());\n    }\n}\n"
            },
            "src/com/kovko/dictionary/HashMapDictionary.java" : {
              "name" : "src/com/kovko/dictionary/HashMapDictionary.java",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "package com.kovko.dictionary;\n\nimport java.util.HashMap;\nimport java.util.Locale;\n\npublic class HashMapDictionary implements Dictionary {\n\n    private final HashMap<String, String> translations;\n\n    public HashMapDictionary() {\n        translations = new HashMap<>();\n        translations.put(\"car\", \"автомобиль\");\n        translations.put(\"cat\", \"кот\");\n    }\n\n    @Override\n    public String lookUp(String text) {\n        return translations.get(text.toLowerCase(Locale.US).trim());\n    }\n}\n"
            },
            "src/com/kovko/dictionary/DictProtocolDictionary.java" : {
              "name" : "src/com/kovko/dictionary/DictProtocolDictionary.java",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "package com.kovko.dictionary;\n\nimport java.io.*;\nimport java.net.Socket;\nimport java.nio.charset.Charset;\nimport java.nio.charset.StandardCharsets;\n\npublic class DictProtocolDictionary implements Dictionary {\n\n    private static final int PORT = 2628;\n    private static final int TIMEOUT = 15000;\n    private static final String DEFINITION_FORMAT = \"DEFINE %s %s\\r\\n\";\n    private final String host;\n\n    public DictProtocolDictionary(String host) {\n        this.host = host;\n    }\n\n    @Override\n    public String lookUp(String text) {\n        String definition;\n        try (Socket socket = new Socket(host, PORT)){\n            socket.setSoTimeout(TIMEOUT);\n            Writer writer = getWriter(socket, StandardCharsets.UTF_8);\n            BufferedReader reader = getReader(socket, StandardCharsets.UTF_8);\n            definition = define(text, \"fd-eng-rus\", writer, reader);\n            quit(writer);\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n        return definition;\n    }\n\n    static String define(String word, String dictionary, Writer writer, BufferedReader reader) throws IOException {\n        StringBuilder stringBuilder = new StringBuilder();\n        writer.write(String.format(DEFINITION_FORMAT, dictionary, word));\n        writer.flush();\n        for (String line = reader.readLine(); line != null; line = reader.readLine()) {\n            // If there no definition for this word, we don't provide anything\n            if (line.startsWith(\"552 \")) { // no match\n                System.out.println(\"No definition found for: \" + word);\n                break;\n                // All the status lines should be ignored\n            } else if (line.matches(\"(\\\\d){3}.*\")){\n                continue;\n                // The line which contains only . shows that this is the end of the data\n            } else if (line.trim().equals(\".\")) {\n                break;\n                // We append all the translation to the initial StringBuilder\n            } else {\n                stringBuilder.append(line);\n            }\n        }\n        return stringBuilder.toString();\n    }\n\n    private void quit(Writer writer) throws IOException {\n        writer.write(\"quit\\r\\n\");\n        writer.flush();\n    }\n\n    private BufferedReader getReader(Socket socket, Charset charset) throws IOException {\n        InputStream inputStream = socket.getInputStream();\n        InputStreamReader inputStreamReader = new InputStreamReader(inputStream, charset);\n        return new BufferedReader(inputStreamReader);\n    }\n\n    private Writer getWriter(Socket socket, Charset charset) throws IOException {\n        OutputStream outputStream = socket.getOutputStream();\n        Writer writer = new OutputStreamWriter(outputStream, charset);\n        return new BufferedWriter(writer);\n    }\n}\n"
            },
            "src/com/kovko/translator/Translator.java" : {
              "name" : "src/com/kovko/translator/Translator.java",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "package com.kovko.translator;\n\npublic interface Translator {\n    String translate(String text);\n}\n"
            },
            "src/com/kovko/translator/BasicTranslator.java" : {
              "name" : "src/com/kovko/translator/BasicTranslator.java",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "package com.kovko.translator;\n\nimport com.google.inject.Inject;\nimport com.kovko.dictionary.Dictionary;\n\n\npublic class BasicTranslator implements Translator {\n\n    private final Dictionary dictionary;\n\n    @Inject\n    public BasicTranslator(Dictionary dictionary) {\n        this.dictionary = dictionary;\n    }\n\n    @Override\n    public String translate(String text) {\n        return dictionary.lookUp(text);\n    }\n}\n"
            },
            "src/com/kovko/configuration/ApplicationConfiguration.java" : {
              "name" : "src/com/kovko/configuration/ApplicationConfiguration.java",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "package com.kovko.configuration;\n\nimport com.kovko.dictionary.DictProtocolDictionary;\nimport com.kovko.dictionary.Dictionary;\nimport com.kovko.translator.BasicTranslator;\nimport com.kovko.translator.Translator;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\npublic class ApplicationConfiguration {\n\n    @Bean\n    public Dictionary dictionary() {\n        return new DictProtocolDictionary(\"dict.org\");\n    }\n\n    @Bean\n    public Translator translator() {\n        return new BasicTranslator(dictionary());\n    }\n}\n"
            }
          },
          "description_text" : "",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "theory"
        },
        {
          "name" : "Spring container (annotation configuration)",
          "files" : {
            "src/com/kovko/runner/Main.java" : {
              "name" : "src/com/kovko/runner/Main.java",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "package com.kovko.runner;\n\nimport com.kovko.configuration.ApplicationConfiguration;\nimport com.kovko.translator.Translator;\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\n\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(ApplicationConfiguration.class);\n        Translator translator = context.getBean(Translator.class);\n        List<String> words = List.of(\"car\", \"cat\");\n        for (String word : words) {\n            String translation = translator.translate(word);\n            System.out.println(translation);\n        }\n    }\n}\n\n"
            },
            "src/com/kovko/dictionary/Dictionary.java" : {
              "name" : "src/com/kovko/dictionary/Dictionary.java",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "package com.kovko.dictionary;\n\npublic interface Dictionary {\n    String lookUp(String text);\n}\n"
            },
            "src/com/kovko/dictionary/CsvFileDictionary.java" : {
              "name" : "src/com/kovko/dictionary/CsvFileDictionary.java",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "package com.kovko.dictionary;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.nio.charset.Charset;\nimport java.util.HashMap;\nimport java.util.Locale;\n\npublic class CsvFileDictionary implements Dictionary {\n\n    private static final String DELIMITER = \",\";\n    private final HashMap<String, String> translations;\n\n    public CsvFileDictionary(String fileName, Charset charset, Locale sourceLangLocale, Locale targetLangLocale) {\n        translations = new HashMap<>();\n\n        try (InputStream stream = getClass().getClassLoader().getResourceAsStream(fileName);\n             InputStreamReader inputStreamReader = new InputStreamReader(stream, charset);\n             BufferedReader reader = new BufferedReader(inputStreamReader)) {\n            for (String line = reader.readLine(); line != null; line = reader.readLine()) {\n                String[] words = line.split(DELIMITER);\n                if (words.length == 2) {\n                    String word = words[0].toLowerCase(sourceLangLocale).strip();\n                    String translation = words[1].toLowerCase(targetLangLocale).strip();\n                    translations.put(word, translation);\n                }\n            }\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    @Override\n    public String lookUp(String text) {\n        return translations.get(text.toLowerCase(Locale.US).trim());\n    }\n}\n"
            },
            "src/com/kovko/dictionary/HashMapDictionary.java" : {
              "name" : "src/com/kovko/dictionary/HashMapDictionary.java",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "package com.kovko.dictionary;\n\nimport org.springframework.stereotype.Component;\n\nimport java.util.HashMap;\nimport java.util.Locale;\n\n@Component\npublic class HashMapDictionary implements Dictionary {\n\n    private final HashMap<String, String> translations;\n\n    public HashMapDictionary() {\n        translations = new HashMap<>();\n        translations.put(\"car\", \"автомобиль\");\n        translations.put(\"cat\", \"кот\");\n    }\n\n    @Override\n    public String lookUp(String text) {\n        return translations.get(text.toLowerCase(Locale.US).trim());\n    }\n}\n"
            },
            "src/com/kovko/dictionary/DictProtocolDictionary.java" : {
              "name" : "src/com/kovko/dictionary/DictProtocolDictionary.java",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "package com.kovko.dictionary;\n\nimport org.springframework.stereotype.Component;\n\nimport java.io.*;\nimport java.net.Socket;\nimport java.nio.charset.Charset;\nimport java.nio.charset.StandardCharsets;\n\npublic class DictProtocolDictionary implements Dictionary {\n\n    private static final int PORT = 2628;\n    private static final int TIMEOUT = 15000;\n    private static final String DEFINITION_FORMAT = \"DEFINE %s %s\\r\\n\";\n    private final String host;\n\n    public DictProtocolDictionary(String host) {\n        this.host = host;\n    }\n\n    @Override\n    public String lookUp(String text) {\n        String definition;\n        try (Socket socket = new Socket(host, PORT)){\n            socket.setSoTimeout(TIMEOUT);\n            Writer writer = getWriter(socket, StandardCharsets.UTF_8);\n            BufferedReader reader = getReader(socket, StandardCharsets.UTF_8);\n            definition = define(text, \"fd-eng-rus\", writer, reader);\n            quit(writer);\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n        return definition;\n    }\n\n    static String define(String word, String dictionary, Writer writer, BufferedReader reader) throws IOException {\n        StringBuilder stringBuilder = new StringBuilder();\n        writer.write(String.format(DEFINITION_FORMAT, dictionary, word));\n        writer.flush();\n        for (String line = reader.readLine(); line != null; line = reader.readLine()) {\n            // If there no definition for this word, we don't provide anything\n            if (line.startsWith(\"552 \")) { // no match\n                System.out.println(\"No definition found for: \" + word);\n                break;\n                // All the status lines should be ignored\n            } else if (line.matches(\"(\\\\d){3}.*\")){\n                continue;\n                // The line which contains only . shows that this is the end of the data\n            } else if (line.trim().equals(\".\")) {\n                break;\n                // We append all the translation to the initial StringBuilder\n            } else {\n                stringBuilder.append(line);\n            }\n        }\n        return stringBuilder.toString();\n    }\n\n    private void quit(Writer writer) throws IOException {\n        writer.write(\"quit\\r\\n\");\n        writer.flush();\n    }\n\n    private BufferedReader getReader(Socket socket, Charset charset) throws IOException {\n        InputStream inputStream = socket.getInputStream();\n        InputStreamReader inputStreamReader = new InputStreamReader(inputStream, charset);\n        return new BufferedReader(inputStreamReader);\n    }\n\n    private Writer getWriter(Socket socket, Charset charset) throws IOException {\n        OutputStream outputStream = socket.getOutputStream();\n        Writer writer = new OutputStreamWriter(outputStream, charset);\n        return new BufferedWriter(writer);\n    }\n}\n"
            },
            "src/com/kovko/translator/Translator.java" : {
              "name" : "src/com/kovko/translator/Translator.java",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "package com.kovko.translator;\n\npublic interface Translator {\n    String translate(String text);\n}\n"
            },
            "src/com/kovko/translator/BasicTranslator.java" : {
              "name" : "src/com/kovko/translator/BasicTranslator.java",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "package com.kovko.translator;\n\nimport com.kovko.dictionary.Dictionary;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\n\n@Component\npublic class BasicTranslator implements Translator {\n\n    private final Dictionary dictionary;\n\n    @Autowired\n    public BasicTranslator(Dictionary dictionary) {\n        this.dictionary = dictionary;\n    }\n\n    @Override\n    public String translate(String text) {\n        return dictionary.lookUp(text);\n    }\n}\n"
            },
            "src/com/kovko/configuration/ApplicationConfiguration.java" : {
              "name" : "src/com/kovko/configuration/ApplicationConfiguration.java",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "package com.kovko.configuration;\n\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\n@ComponentScan(\"com.com.com.com.com.kovko\")\npublic class ApplicationConfiguration {\n}\n"
            }
          },
          "description_text" : "",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "theory"
        },
        {
          "name" : "Spring container (XML configuration)",
          "files" : {
            "src/com/kovko/runner/Main.java" : {
              "name" : "src/com/kovko/runner/Main.java",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "package com.kovko.runner;\n\nimport com.kovko.translator.Translator;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(\"beans.xml\");\n        Translator translator = context.getBean(Translator.class);\n        List<String> words = List.of(\"gold\", \"nose\");\n        for (String word : words) {\n            String translation = translator.translate(word);\n            System.out.println(translation);\n        }\n    }\n}\n\n"
            },
            "src/com/kovko/dictionary/Dictionary.java" : {
              "name" : "src/com/kovko/dictionary/Dictionary.java",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "package com.kovko.dictionary;\n\npublic interface Dictionary {\n    String lookUp(String text);\n}\n"
            },
            "src/com/kovko/dictionary/CsvFileDictionary.java" : {
              "name" : "src/com/kovko/dictionary/CsvFileDictionary.java",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "package com.kovko.dictionary;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.nio.charset.Charset;\nimport java.util.HashMap;\nimport java.util.Locale;\n\npublic class CsvFileDictionary implements Dictionary {\n\n    private static final String DELIMITER = \",\";\n    private final HashMap<String, String> translations;\n\n    public CsvFileDictionary(String fileName, Charset charset, Locale sourceLangLocale, Locale targetLangLocale) {\n        translations = new HashMap<>();\n\n        try (InputStream stream = getClass().getClassLoader().getResourceAsStream(fileName);\n             InputStreamReader inputStreamReader = new InputStreamReader(stream, charset);\n             BufferedReader reader = new BufferedReader(inputStreamReader)) {\n            for (String line = reader.readLine(); line != null; line = reader.readLine()) {\n                String[] words = line.split(DELIMITER);\n                if (words.length == 2) {\n                    String word = words[0].toLowerCase(sourceLangLocale).strip();\n                    String translation = words[1].toLowerCase(targetLangLocale).strip();\n                    translations.put(word, translation);\n                }\n            }\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    @Override\n    public String lookUp(String text) {\n        return translations.get(text.toLowerCase(Locale.US).trim());\n    }\n}\n"
            },
            "src/com/kovko/dictionary/HashMapDictionary.java" : {
              "name" : "src/com/kovko/dictionary/HashMapDictionary.java",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "package com.kovko.dictionary;\n\nimport java.util.HashMap;\nimport java.util.Locale;\n\npublic class HashMapDictionary implements Dictionary {\n\n    private final HashMap<String, String> translations;\n\n    public HashMapDictionary() {\n        translations = new HashMap<>();\n        translations.put(\"car\", \"автомобиль\");\n        translations.put(\"cat\", \"кот\");\n    }\n\n    @Override\n    public String lookUp(String text) {\n        return translations.get(text.toLowerCase(Locale.US).trim());\n    }\n}\n"
            },
            "src/com/kovko/dictionary/DictProtocolDictionary.java" : {
              "name" : "src/com/kovko/dictionary/DictProtocolDictionary.java",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "package com.kovko.dictionary;\n\nimport java.io.*;\nimport java.net.Socket;\nimport java.nio.charset.Charset;\nimport java.nio.charset.StandardCharsets;\n\npublic class DictProtocolDictionary implements Dictionary {\n\n    private static final int PORT = 2628;\n    private static final int TIMEOUT = 15000;\n    private static final String DEFINITION_FORMAT = \"DEFINE %s %s\\r\\n\";\n    private final String host;\n\n    public DictProtocolDictionary(String host) {\n        this.host = host;\n    }\n\n    @Override\n    public String lookUp(String text) {\n        String definition;\n        try (Socket socket = new Socket(host, PORT)){\n            socket.setSoTimeout(TIMEOUT);\n            Writer writer = getWriter(socket, StandardCharsets.UTF_8);\n            BufferedReader reader = getReader(socket, StandardCharsets.UTF_8);\n            definition = define(text, \"fd-eng-rus\", writer, reader);\n            quit(writer);\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n        return definition;\n    }\n\n    private String define(String word, String dictionary, Writer writer, BufferedReader reader) throws IOException {\n        StringBuilder stringBuilder = new StringBuilder();\n        writer.write(String.format(DEFINITION_FORMAT, dictionary, word));\n        writer.flush();\n        for (String line = reader.readLine(); line != null; line = reader.readLine()) {\n            // If there no definition for this word, we don't provide anything\n            if (line.startsWith(\"552 \")) { // no match\n                System.out.println(\"No definition found for: \" + word);\n                break;\n                // All the status lines should be ignored\n            } else if (line.matches(\"(\\\\d){3}.*\")){\n                continue;\n                // The line which contains only . shows that this is the end of the data\n            } else if (line.trim().equals(\".\")) {\n                break;\n                // We append all the translation to the initial StringBuilder\n            } else {\n                stringBuilder.append(line);\n            }\n        }\n        return stringBuilder.toString();\n    }\n\n    private void quit(Writer writer) throws IOException {\n        writer.write(\"quit\\r\\n\");\n        writer.flush();\n    }\n\n    private BufferedReader getReader(Socket socket, Charset charset) throws IOException {\n        InputStream inputStream = socket.getInputStream();\n        InputStreamReader inputStreamReader = new InputStreamReader(inputStream, charset);\n        return new BufferedReader(inputStreamReader);\n    }\n\n    private Writer getWriter(Socket socket, Charset charset) throws IOException {\n        OutputStream outputStream = socket.getOutputStream();\n        Writer writer = new OutputStreamWriter(outputStream, charset);\n        return new BufferedWriter(writer);\n    }\n}\n"
            },
            "src/com/kovko/translator/Translator.java" : {
              "name" : "src/com/kovko/translator/Translator.java",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "package com.kovko.translator;\n\npublic interface Translator {\n    String translate(String text);\n}\n"
            },
            "src/com/kovko/translator/BasicTranslator.java" : {
              "name" : "src/com/kovko/translator/BasicTranslator.java",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "package com.kovko.translator;\n\nimport com.kovko.dictionary.Dictionary;\n\n\npublic class BasicTranslator implements Translator {\n\n    private final Dictionary dictionary;\n\n    public BasicTranslator(Dictionary dictionary) {\n        this.dictionary = dictionary;\n    }\n\n    @Override\n    public String translate(String text) {\n        return dictionary.lookUp(text);\n    }\n}\n"
            },
            "src/main/resources/beans.xml" : {
              "name" : "src/main/resources/beans.xml",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"\n        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\">\n\n    <bean class=\"com.com.com.com.com.kovko.com.com.kovko.com.kovko.translator.BasicTranslator\">\n        <constructor-arg index=\"0\" ref=\"dictProtocolDictionary\"/>\n    </bean>\n\n    <bean id=\"dictProtocolDictionary\" class=\"com.com.com.com.com.kovko.dictionary.DictProtocolDictionary\">\n        <constructor-arg index=\"0\" value=\"dict.org\"/>\n    </bean>\n\n</beans>"
            }
          },
          "description_text" : "",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "theory"
        }
      ],
      "type" : "lesson"
    },
    {
      "title" : "Dependency injection",
      "task_list" : [ ],
      "type" : "lesson"
    }
  ],
  "additional_files" : [
    {
      "name" : "build.gradle",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "buildscript {\n    repositories {\n        mavenCentral()\n    }\n}\n\ndef printOutput(def output) {\n    return tasks.create(\"printOutput\") {\n        for (line in output.toString().readLines()) {\n            println \"#educational_plugin\" + line\n        }\n    }\n}\n\nsubprojects {\n\n    apply plugin: 'application'\n    apply plugin: 'java'\n\n    sourceCompatibility = 11\n\n    repositories {\n        mavenCentral()\n    }\n\n    dependencies {\n        compile 'com.google.inject:guice:5.0.1'\n        compile 'org.springframework:spring-context:5.2.15.RELEASE'\n        compile 'org.springframework:spring-core:5.2.15.RELEASE'\n        testImplementation 'org.assertj:assertj-core:3.20.2'\n        testImplementation  'org.junit.jupiter:junit-jupiter:5.7.2'\n        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'\n        test.useJUnitPlatform()\n    }\n\n    sourceSets {\n        main {\n            java.srcDir 'src'\n        }\n        test {\n            java.srcDir 'test'\n        }\n    }\n\n    mainClassName = project.hasProperty(\"mainClass\") ? project.getProperty(\"mainClass\") : \"\"\n\n    def runOutput = new ByteArrayOutputStream()\n    tasks.run.setStandardOutput(runOutput)\n    tasks.run.doLast { printOutput(runOutput) }\n}\nconfigure(subprojects.findAll {it.name != 'util'}) {\n  dependencies {\n    compile project(':util').sourceSets.main.output\n    testCompile project(':util').sourceSets.test.output\n  }\n}"
    },
    {
      "name" : "Dependency injection/Cyclic dependencies/src/com/kovko/cyclic/OneService.java",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "package com.kovko.cyclic;\r\n\r\npublic class OneService {\r\n\r\n    private YetAnotherService yetAnotherService;\r\n\r\n    public void setYetAnotherService(YetAnotherService yetAnotherService) {\r\n        this.yetAnotherService = yetAnotherService;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return \"OneService{\" +\r\n                \"yetAnotherService=\" + yetAnotherService +\r\n                '}';\r\n    }\r\n}\r\n"
    },
    {
      "name" : "Dependency injection/Cyclic dependencies/src/com/kovko/cyclic/AnotherService.java",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "package com.kovko.cyclic;\r\n\r\npublic class AnotherService {\r\n\r\n    private OneService oneService;\r\n\r\n    public void setOneService(OneService oneService) {\r\n        this.oneService = oneService;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return \"AnotherService{\" +\r\n                \"oneService=\" + oneService +\r\n                '}';\r\n    }\r\n}\r\n"
    },
    {
      "name" : "Dependency injection/Cyclic dependencies/src/com/kovko/cyclic/YetAnotherService.java",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "package com.kovko.cyclic;\r\n\r\npublic class YetAnotherService {\r\n\r\n    private AnotherService anotherService;\r\n\r\n    public void setAnotherService(AnotherService anotherService) {\r\n        this.anotherService = anotherService;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return \"YetAnotherService{\" +\r\n                \"anotherService=\" + anotherService +\r\n                '}';\r\n    }\r\n}\r\n"
    },
    {
      "name" : "Dependency injection/Cyclic dependencies/src/com/kovko/runner/Main.java",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "package com.kovko.runner;\n\nimport com.kovko.cyclic.AnotherService;\nimport com.kovko.cyclic.OneService;\nimport com.kovko.cyclic.YetAnotherService;\n\npublic class Main {\n   public static void main(String[] args) {\n      OneService oneService = new OneService();\n      AnotherService anotherService = new AnotherService();\n      YetAnotherService yetAnotherService = new YetAnotherService();\n\n      anotherService.setOneService(oneService);\n      yetAnotherService.setAnotherService(anotherService);\n      oneService.setYetAnotherService(yetAnotherService);\n\n      System.out.println(oneService);\n   }\n}"
    },
    {
      "name" : "Dependency injection/Dependency injection via interface/src/com/kovko/light/LightBulb.java",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "package com.kovko.light;\r\n\r\npublic class LightBulb {\r\n\r\n    boolean status = true;\r\n\r\n    public boolean isWorking() {\r\n        return status;\r\n    }\r\n}\r\n"
    },
    {
      "name" : "Dependency injection/Dependency injection via interface/src/com/kovko/appliance/DescLamp.java",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "package com.kovko.appliance;\r\n\r\npublic class DescLamp extends BasicLightSource {\r\n}\r\n"
    },
    {
      "name" : "Dependency injection/Dependency injection via interface/src/com/kovko/appliance/FridgeLight.java",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "package com.kovko.appliance;\r\n\r\npublic class FridgeLight extends BasicLightSource {\r\n}\r\n"
    },
    {
      "name" : "Dependency injection/Dependency injection via interface/src/com/kovko/appliance/LightSource.java",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "package com.kovko.appliance;\r\n\r\nimport com.kovko.light.LightBulb;\r\n\r\npublic interface LightSource {\r\n\r\n    void changeLightBulb(LightBulb lightBulb);\r\n}\r\n"
    },
    {
      "name" : "Dependency injection/Dependency injection via interface/src/com/kovko/appliance/CeilingLight.java",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "package com.kovko.appliance;\r\n\r\npublic class CeilingLight extends BasicLightSource {\r\n}\r\n"
    },
    {
      "name" : "Dependency injection/Dependency injection via interface/src/com/kovko/appliance/BasicLightSource.java",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "package com.kovko.appliance;\r\n\r\nimport com.kovko.light.LightBulb;\r\n\r\npublic class BasicLightSource {\r\n\r\n    private LightBulb lightBulb;\r\n\r\n    public void changeLightBulb(LightBulb lightBulb) {\r\n        this.lightBulb = lightBulb;\r\n    }\r\n\r\n    public void turnOn() {\r\n        if (lightBulb != null && lightBulb.isWorking()) {\r\n            System.out.println(\"The light is on\");\r\n        } else {\r\n            System.out.println(\"Nothing is really happening\");\r\n        }\r\n    }\r\n\r\n    public void turnOff() {\r\n        if (lightBulb != null && lightBulb.isWorking()) {\r\n            System.out.println(\"The light is off\");\r\n        } else {\r\n            System.out.println(\"Nothing is really happening\");\r\n        }\r\n    }\r\n}\r\n"
    },
    {
      "name" : "Dependency injection/Dependency injection via interface/src/Main.java",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "public class Main {\n   public static void main(String[] args) {\n      // Write your solution here\n   }\n}"
    }
  ],
  "version" : 11
}